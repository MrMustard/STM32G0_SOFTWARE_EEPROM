
FLASH_EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004208  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aac  08004aac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004aac  08004aac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aac  08004aac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aac  08004aac  00014aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08004b24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08004b24  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4e7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb4  00000000  00000000  0002c57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143ad  00000000  00000000  0002f460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c788  00000000  00000000  0004380d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000801fd  00000000  00000000  0004ff95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0192  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021c0  00000000  00000000  000d01e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080042a8 	.word	0x080042a8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080042a8 	.word	0x080042a8

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b5b0      	push	{r4, r5, r7, lr}
 8000412:	4cfe      	ldr	r4, [pc, #1016]	; (800080c <main+0x3fc>)
 8000414:	44a5      	add	sp, r4
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000418:	f000 ff3e 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041c:	f000 fd86 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000420:	f000 fe1a 	bl	8001058 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000424:	f000 fdca 	bl	8000fbc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


//inicializacion de la memoria eeprom
hexPage = getHexAddressPage(DATA_PAGE);            //Get our hex page // nos devuelve los dat
 8000428:	201f      	movs	r0, #31
 800042a:	f002 fd63 	bl	8002ef4 <getHexAddressPage>
 800042e:	0002      	movs	r2, r0
 8000430:	4bf7      	ldr	r3, [pc, #988]	; (8000810 <main+0x400>)
 8000432:	601a      	str	r2, [r3, #0]
SerialUartSendString("Iniciando el programa eeprom mamalona\n");
 8000434:	4bf7      	ldr	r3, [pc, #988]	; (8000814 <main+0x404>)
 8000436:	0018      	movs	r0, r3
 8000438:	f003 fa6e 	bl	8003918 <SerialUartSendString>



/*Estas son las varaibles que usare para simular los numeros telefonicos y los permisos */
	int numero_1[10]={5,5,6,6,2,9,4,2,3,6};
 800043c:	23d8      	movs	r3, #216	; 0xd8
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	4af5      	ldr	r2, [pc, #980]	; (8000818 <main+0x408>)
 8000444:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000446:	c313      	stmia	r3!, {r0, r1, r4}
 8000448:	ca13      	ldmia	r2!, {r0, r1, r4}
 800044a:	c313      	stmia	r3!, {r0, r1, r4}
 800044c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800044e:	c313      	stmia	r3!, {r0, r1, r4}
 8000450:	6812      	ldr	r2, [r2, #0]
 8000452:	601a      	str	r2, [r3, #0]
	int numero_2[10]={5,6,1,4,3,9,9,5,2,4};
 8000454:	23ce      	movs	r3, #206	; 0xce
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	4af0      	ldr	r2, [pc, #960]	; (800081c <main+0x40c>)
 800045c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800045e:	c313      	stmia	r3!, {r0, r1, r4}
 8000460:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000462:	c313      	stmia	r3!, {r0, r1, r4}
 8000464:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000466:	c313      	stmia	r3!, {r0, r1, r4}
 8000468:	6812      	ldr	r2, [r2, #0]
 800046a:	601a      	str	r2, [r3, #0]
	int numero_3[10]={1,2,3,4,5,6,7,8,9,0};
 800046c:	23c4      	movs	r3, #196	; 0xc4
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	4aeb      	ldr	r2, [pc, #940]	; (8000820 <main+0x410>)
 8000474:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000476:	c313      	stmia	r3!, {r0, r1, r4}
 8000478:	ca13      	ldmia	r2!, {r0, r1, r4}
 800047a:	c313      	stmia	r3!, {r0, r1, r4}
 800047c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800047e:	c313      	stmia	r3!, {r0, r1, r4}
 8000480:	6812      	ldr	r2, [r2, #0]
 8000482:	601a      	str	r2, [r3, #0]
	int numero_4[10]={5,5,6,7,1,1,1,1,1,0};
 8000484:	23ba      	movs	r3, #186	; 0xba
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	4ae6      	ldr	r2, [pc, #920]	; (8000824 <main+0x414>)
 800048c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800048e:	c313      	stmia	r3!, {r0, r1, r4}
 8000490:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000492:	c313      	stmia	r3!, {r0, r1, r4}
 8000494:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000496:	c313      	stmia	r3!, {r0, r1, r4}
 8000498:	6812      	ldr	r2, [r2, #0]
 800049a:	601a      	str	r2, [r3, #0]
	int numero_5[10]={1,3,4,3,4,8,9,3,1,2};
 800049c:	4be2      	ldr	r3, [pc, #904]	; (8000828 <main+0x418>)
 800049e:	21f6      	movs	r1, #246	; 0xf6
 80004a0:	0089      	lsls	r1, r1, #2
 80004a2:	185b      	adds	r3, r3, r1
 80004a4:	19db      	adds	r3, r3, r7
 80004a6:	4ae1      	ldr	r2, [pc, #900]	; (800082c <main+0x41c>)
 80004a8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004aa:	c331      	stmia	r3!, {r0, r4, r5}
 80004ac:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004ae:	c331      	stmia	r3!, {r0, r4, r5}
 80004b0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004b2:	c331      	stmia	r3!, {r0, r4, r5}
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	601a      	str	r2, [r3, #0]
	int numero_6[10]={6,6,6,6,6,6,6,6,6,6};
 80004b8:	4bdd      	ldr	r3, [pc, #884]	; (8000830 <main+0x420>)
 80004ba:	185b      	adds	r3, r3, r1
 80004bc:	19db      	adds	r3, r3, r7
 80004be:	4add      	ldr	r2, [pc, #884]	; (8000834 <main+0x424>)
 80004c0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004c2:	c331      	stmia	r3!, {r0, r4, r5}
 80004c4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004c6:	c331      	stmia	r3!, {r0, r4, r5}
 80004c8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004ca:	c331      	stmia	r3!, {r0, r4, r5}
 80004cc:	6812      	ldr	r2, [r2, #0]
 80004ce:	601a      	str	r2, [r3, #0]
	int numero_7[10]={7,7,7,7,7,7,7,7,7,7};
 80004d0:	4bd9      	ldr	r3, [pc, #868]	; (8000838 <main+0x428>)
 80004d2:	185b      	adds	r3, r3, r1
 80004d4:	19db      	adds	r3, r3, r7
 80004d6:	4ad9      	ldr	r2, [pc, #868]	; (800083c <main+0x42c>)
 80004d8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004da:	c331      	stmia	r3!, {r0, r4, r5}
 80004dc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004de:	c331      	stmia	r3!, {r0, r4, r5}
 80004e0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004e2:	c331      	stmia	r3!, {r0, r4, r5}
 80004e4:	6812      	ldr	r2, [r2, #0]
 80004e6:	601a      	str	r2, [r3, #0]
	int numero_8[10]={8,8,8,8,8,8,8,8,8,8};
 80004e8:	4bd5      	ldr	r3, [pc, #852]	; (8000840 <main+0x430>)
 80004ea:	185b      	adds	r3, r3, r1
 80004ec:	19db      	adds	r3, r3, r7
 80004ee:	4ad5      	ldr	r2, [pc, #852]	; (8000844 <main+0x434>)
 80004f0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004f2:	c331      	stmia	r3!, {r0, r4, r5}
 80004f4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004f6:	c331      	stmia	r3!, {r0, r4, r5}
 80004f8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004fa:	c331      	stmia	r3!, {r0, r4, r5}
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	601a      	str	r2, [r3, #0]
	int numero_9[10]={9,9,9,9,9,9,9,9,9,9};
 8000500:	4bd1      	ldr	r3, [pc, #836]	; (8000848 <main+0x438>)
 8000502:	185b      	adds	r3, r3, r1
 8000504:	19db      	adds	r3, r3, r7
 8000506:	4ad1      	ldr	r2, [pc, #836]	; (800084c <main+0x43c>)
 8000508:	ca31      	ldmia	r2!, {r0, r4, r5}
 800050a:	c331      	stmia	r3!, {r0, r4, r5}
 800050c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800050e:	c331      	stmia	r3!, {r0, r4, r5}
 8000510:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000512:	c331      	stmia	r3!, {r0, r4, r5}
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	601a      	str	r2, [r3, #0]
	int numero_10[10]={1,1,1,1,1,1,1,1,1,1};
 8000518:	4bcd      	ldr	r3, [pc, #820]	; (8000850 <main+0x440>)
 800051a:	185b      	adds	r3, r3, r1
 800051c:	19db      	adds	r3, r3, r7
 800051e:	4acd      	ldr	r2, [pc, #820]	; (8000854 <main+0x444>)
 8000520:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000522:	c331      	stmia	r3!, {r0, r4, r5}
 8000524:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000526:	c331      	stmia	r3!, {r0, r4, r5}
 8000528:	ca31      	ldmia	r2!, {r0, r4, r5}
 800052a:	c331      	stmia	r3!, {r0, r4, r5}
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	601a      	str	r2, [r3, #0]
	int numero_11[10]={2,2,2,2,2,2,2,2,2,2};
 8000530:	4bc9      	ldr	r3, [pc, #804]	; (8000858 <main+0x448>)
 8000532:	185b      	adds	r3, r3, r1
 8000534:	19db      	adds	r3, r3, r7
 8000536:	4ac9      	ldr	r2, [pc, #804]	; (800085c <main+0x44c>)
 8000538:	ca31      	ldmia	r2!, {r0, r4, r5}
 800053a:	c331      	stmia	r3!, {r0, r4, r5}
 800053c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800053e:	c331      	stmia	r3!, {r0, r4, r5}
 8000540:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000542:	c331      	stmia	r3!, {r0, r4, r5}
 8000544:	6812      	ldr	r2, [r2, #0]
 8000546:	601a      	str	r2, [r3, #0]
	int numero_12[10]={3,3,3,3,3,3,3,3,3,3};
 8000548:	4bc5      	ldr	r3, [pc, #788]	; (8000860 <main+0x450>)
 800054a:	185b      	adds	r3, r3, r1
 800054c:	19db      	adds	r3, r3, r7
 800054e:	4ac5      	ldr	r2, [pc, #788]	; (8000864 <main+0x454>)
 8000550:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000552:	c331      	stmia	r3!, {r0, r4, r5}
 8000554:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000556:	c331      	stmia	r3!, {r0, r4, r5}
 8000558:	ca31      	ldmia	r2!, {r0, r4, r5}
 800055a:	c331      	stmia	r3!, {r0, r4, r5}
 800055c:	6812      	ldr	r2, [r2, #0]
 800055e:	601a      	str	r2, [r3, #0]
	int numero_13[10]={4,4,4,4,4,4,4,4,4,4};
 8000560:	4bc1      	ldr	r3, [pc, #772]	; (8000868 <main+0x458>)
 8000562:	185b      	adds	r3, r3, r1
 8000564:	19db      	adds	r3, r3, r7
 8000566:	4ac1      	ldr	r2, [pc, #772]	; (800086c <main+0x45c>)
 8000568:	ca31      	ldmia	r2!, {r0, r4, r5}
 800056a:	c331      	stmia	r3!, {r0, r4, r5}
 800056c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800056e:	c331      	stmia	r3!, {r0, r4, r5}
 8000570:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000572:	c331      	stmia	r3!, {r0, r4, r5}
 8000574:	6812      	ldr	r2, [r2, #0]
 8000576:	601a      	str	r2, [r3, #0]
	int numero_14[10]={8,8,8,8,8,8,8,8,8,8};
 8000578:	4bbd      	ldr	r3, [pc, #756]	; (8000870 <main+0x460>)
 800057a:	185b      	adds	r3, r3, r1
 800057c:	19db      	adds	r3, r3, r7
 800057e:	4ab1      	ldr	r2, [pc, #708]	; (8000844 <main+0x434>)
 8000580:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000582:	c331      	stmia	r3!, {r0, r4, r5}
 8000584:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000586:	c331      	stmia	r3!, {r0, r4, r5}
 8000588:	ca31      	ldmia	r2!, {r0, r4, r5}
 800058a:	c331      	stmia	r3!, {r0, r4, r5}
 800058c:	6812      	ldr	r2, [r2, #0]
 800058e:	601a      	str	r2, [r3, #0]
	int numero_15[10]={9,9,9,9,9,9,9,9,9,9};
 8000590:	4bb8      	ldr	r3, [pc, #736]	; (8000874 <main+0x464>)
 8000592:	185b      	adds	r3, r3, r1
 8000594:	19db      	adds	r3, r3, r7
 8000596:	4aad      	ldr	r2, [pc, #692]	; (800084c <main+0x43c>)
 8000598:	ca31      	ldmia	r2!, {r0, r4, r5}
 800059a:	c331      	stmia	r3!, {r0, r4, r5}
 800059c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800059e:	c331      	stmia	r3!, {r0, r4, r5}
 80005a0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005a2:	c331      	stmia	r3!, {r0, r4, r5}
 80005a4:	6812      	ldr	r2, [r2, #0]
 80005a6:	601a      	str	r2, [r3, #0]
	int numero_16[10]={1,1,1,1,2,2,2,2,2,2};
 80005a8:	4bb3      	ldr	r3, [pc, #716]	; (8000878 <main+0x468>)
 80005aa:	185b      	adds	r3, r3, r1
 80005ac:	19db      	adds	r3, r3, r7
 80005ae:	4ab3      	ldr	r2, [pc, #716]	; (800087c <main+0x46c>)
 80005b0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005b2:	c331      	stmia	r3!, {r0, r4, r5}
 80005b4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005b6:	c331      	stmia	r3!, {r0, r4, r5}
 80005b8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005ba:	c331      	stmia	r3!, {r0, r4, r5}
 80005bc:	6812      	ldr	r2, [r2, #0]
 80005be:	601a      	str	r2, [r3, #0]
	int numero_17[10]={6,6,6,6,6,6,6,6,6,5};
 80005c0:	4baf      	ldr	r3, [pc, #700]	; (8000880 <main+0x470>)
 80005c2:	185b      	adds	r3, r3, r1
 80005c4:	19db      	adds	r3, r3, r7
 80005c6:	4aaf      	ldr	r2, [pc, #700]	; (8000884 <main+0x474>)
 80005c8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005ca:	c331      	stmia	r3!, {r0, r4, r5}
 80005cc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005ce:	c331      	stmia	r3!, {r0, r4, r5}
 80005d0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005d2:	c331      	stmia	r3!, {r0, r4, r5}
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	601a      	str	r2, [r3, #0]
	int numero_18[10]={3,3,3,3,3,3,3,2,4,8};
 80005d8:	4bab      	ldr	r3, [pc, #684]	; (8000888 <main+0x478>)
 80005da:	185b      	adds	r3, r3, r1
 80005dc:	19db      	adds	r3, r3, r7
 80005de:	4aab      	ldr	r2, [pc, #684]	; (800088c <main+0x47c>)
 80005e0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005e2:	c331      	stmia	r3!, {r0, r4, r5}
 80005e4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005e6:	c331      	stmia	r3!, {r0, r4, r5}
 80005e8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005ea:	c331      	stmia	r3!, {r0, r4, r5}
 80005ec:	6812      	ldr	r2, [r2, #0]
 80005ee:	601a      	str	r2, [r3, #0]
	int numero_19[10]={8,9,7,8,6,1,2,3,1,0};
 80005f0:	4ba7      	ldr	r3, [pc, #668]	; (8000890 <main+0x480>)
 80005f2:	185b      	adds	r3, r3, r1
 80005f4:	19db      	adds	r3, r3, r7
 80005f6:	4aa7      	ldr	r2, [pc, #668]	; (8000894 <main+0x484>)
 80005f8:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005fa:	c331      	stmia	r3!, {r0, r4, r5}
 80005fc:	ca31      	ldmia	r2!, {r0, r4, r5}
 80005fe:	c331      	stmia	r3!, {r0, r4, r5}
 8000600:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000602:	c331      	stmia	r3!, {r0, r4, r5}
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	601a      	str	r2, [r3, #0]
	int numero_20[10]={4,6,5,7,8,9,3,6,6,6};
 8000608:	4ba3      	ldr	r3, [pc, #652]	; (8000898 <main+0x488>)
 800060a:	185b      	adds	r3, r3, r1
 800060c:	19db      	adds	r3, r3, r7
 800060e:	4aa3      	ldr	r2, [pc, #652]	; (800089c <main+0x48c>)
 8000610:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000612:	c331      	stmia	r3!, {r0, r4, r5}
 8000614:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000616:	c331      	stmia	r3!, {r0, r4, r5}
 8000618:	ca31      	ldmia	r2!, {r0, r4, r5}
 800061a:	c331      	stmia	r3!, {r0, r4, r5}
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	601a      	str	r2, [r3, #0]
	int comodin[10];//Esta fucnion nos seriva para guardar momentaneamente los valores de numeros telefonicos
	int comodin_pass[5];//este vectos nos sirve para guardar momentaneamente

//estos son los permisos que tiene que tener las varaibles

	int llave_1=0;
 8000620:	2300      	movs	r3, #0
 8000622:	22f5      	movs	r2, #245	; 0xf5
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	18ba      	adds	r2, r7, r2
 8000628:	6013      	str	r3, [r2, #0]
	int llave_2=1;
 800062a:	2301      	movs	r3, #1
 800062c:	22f4      	movs	r2, #244	; 0xf4
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	18ba      	adds	r2, r7, r2
 8000632:	6013      	str	r3, [r2, #0]
	int llave_3=2;
 8000634:	2302      	movs	r3, #2
 8000636:	22f3      	movs	r2, #243	; 0xf3
 8000638:	0092      	lsls	r2, r2, #2
 800063a:	18ba      	adds	r2, r7, r2
 800063c:	6013      	str	r3, [r2, #0]
	int llave_4=3;
 800063e:	2303      	movs	r3, #3
 8000640:	22f2      	movs	r2, #242	; 0xf2
 8000642:	0092      	lsls	r2, r2, #2
 8000644:	18ba      	adds	r2, r7, r2
 8000646:	6013      	str	r3, [r2, #0]
	int llave_5=4;
 8000648:	2304      	movs	r3, #4
 800064a:	22f1      	movs	r2, #241	; 0xf1
 800064c:	0092      	lsls	r2, r2, #2
 800064e:	18ba      	adds	r2, r7, r2
 8000650:	6013      	str	r3, [r2, #0]
	int llave_6=5;
 8000652:	2305      	movs	r3, #5
 8000654:	22f0      	movs	r2, #240	; 0xf0
 8000656:	0092      	lsls	r2, r2, #2
 8000658:	18ba      	adds	r2, r7, r2
 800065a:	6013      	str	r3, [r2, #0]
	int llave_7=6;
 800065c:	2306      	movs	r3, #6
 800065e:	22ef      	movs	r2, #239	; 0xef
 8000660:	0092      	lsls	r2, r2, #2
 8000662:	18ba      	adds	r2, r7, r2
 8000664:	6013      	str	r3, [r2, #0]
	int llave_8=7;
 8000666:	2307      	movs	r3, #7
 8000668:	22ee      	movs	r2, #238	; 0xee
 800066a:	0092      	lsls	r2, r2, #2
 800066c:	18ba      	adds	r2, r7, r2
 800066e:	6013      	str	r3, [r2, #0]
	int llave_9=8;
 8000670:	2308      	movs	r3, #8
 8000672:	22ed      	movs	r2, #237	; 0xed
 8000674:	0092      	lsls	r2, r2, #2
 8000676:	18ba      	adds	r2, r7, r2
 8000678:	6013      	str	r3, [r2, #0]
	int llave_10=9;
 800067a:	2309      	movs	r3, #9
 800067c:	22ec      	movs	r2, #236	; 0xec
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	6013      	str	r3, [r2, #0]
	int llave_11=10;
 8000684:	230a      	movs	r3, #10
 8000686:	22eb      	movs	r2, #235	; 0xeb
 8000688:	0092      	lsls	r2, r2, #2
 800068a:	18ba      	adds	r2, r7, r2
 800068c:	6013      	str	r3, [r2, #0]
	int llave_12=11;
 800068e:	230b      	movs	r3, #11
 8000690:	22ea      	movs	r2, #234	; 0xea
 8000692:	0092      	lsls	r2, r2, #2
 8000694:	18ba      	adds	r2, r7, r2
 8000696:	6013      	str	r3, [r2, #0]
	int llave_13=12;
 8000698:	230c      	movs	r3, #12
 800069a:	22e9      	movs	r2, #233	; 0xe9
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	18ba      	adds	r2, r7, r2
 80006a0:	6013      	str	r3, [r2, #0]
	int llave_14=13;
 80006a2:	230d      	movs	r3, #13
 80006a4:	22e8      	movs	r2, #232	; 0xe8
 80006a6:	0092      	lsls	r2, r2, #2
 80006a8:	18ba      	adds	r2, r7, r2
 80006aa:	6013      	str	r3, [r2, #0]
	int llave_15=14;
 80006ac:	230e      	movs	r3, #14
 80006ae:	22e7      	movs	r2, #231	; 0xe7
 80006b0:	0092      	lsls	r2, r2, #2
 80006b2:	18ba      	adds	r2, r7, r2
 80006b4:	6013      	str	r3, [r2, #0]
	int llave_16=15;
 80006b6:	230f      	movs	r3, #15
 80006b8:	22e6      	movs	r2, #230	; 0xe6
 80006ba:	0092      	lsls	r2, r2, #2
 80006bc:	18ba      	adds	r2, r7, r2
 80006be:	6013      	str	r3, [r2, #0]
	int llave_17=16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	22e5      	movs	r2, #229	; 0xe5
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	18ba      	adds	r2, r7, r2
 80006c8:	6013      	str	r3, [r2, #0]
	int llave_18=17;
 80006ca:	2311      	movs	r3, #17
 80006cc:	22e4      	movs	r2, #228	; 0xe4
 80006ce:	0092      	lsls	r2, r2, #2
 80006d0:	18ba      	adds	r2, r7, r2
 80006d2:	6013      	str	r3, [r2, #0]
	int llave_19=18;
 80006d4:	2312      	movs	r3, #18
 80006d6:	22e3      	movs	r2, #227	; 0xe3
 80006d8:	0092      	lsls	r2, r2, #2
 80006da:	18ba      	adds	r2, r7, r2
 80006dc:	6013      	str	r3, [r2, #0]
	int llave_20=19;
 80006de:	2313      	movs	r3, #19
 80006e0:	22e2      	movs	r2, #226	; 0xe2
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	18ba      	adds	r2, r7, r2
 80006e6:	6013      	str	r3, [r2, #0]
	int pass[5]={1,2,3,4,5};
 80006e8:	4b6d      	ldr	r3, [pc, #436]	; (80008a0 <main+0x490>)
 80006ea:	185b      	adds	r3, r3, r1
 80006ec:	19db      	adds	r3, r3, r7
 80006ee:	4a6d      	ldr	r2, [pc, #436]	; (80008a4 <main+0x494>)
 80006f0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80006f2:	c331      	stmia	r3!, {r0, r4, r5}
 80006f4:	ca11      	ldmia	r2!, {r0, r4}
 80006f6:	c311      	stmia	r3!, {r0, r4}
	int pass_mas[5]={6,4,8,9,2};
 80006f8:	4b6b      	ldr	r3, [pc, #428]	; (80008a8 <main+0x498>)
 80006fa:	185b      	adds	r3, r3, r1
 80006fc:	19db      	adds	r3, r3, r7
 80006fe:	4a6b      	ldr	r2, [pc, #428]	; (80008ac <main+0x49c>)
 8000700:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000702:	c313      	stmia	r3!, {r0, r1, r4}
 8000704:	ca03      	ldmia	r2!, {r0, r1}
 8000706:	c303      	stmia	r3!, {r0, r1}


HAL_Delay(100);
 8000708:	2064      	movs	r0, #100	; 0x64
 800070a:	f000 fe4b 	bl	80013a4 <HAL_Delay>

	  //leer un numero telefonico usando eeprom_read_tel_number
	  //enviasmo hexPage,el index del telefono y el vector donde queremos guardar el vector

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_1, comodin);//guardamos el telefono 1 en comodin
 800070e:	4b40      	ldr	r3, [pc, #256]	; (8000810 <main+0x400>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2440      	movs	r4, #64	; 0x40
 8000714:	193a      	adds	r2, r7, r4
 8000716:	2100      	movs	r1, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f002 fce7 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 1:");
 800071e:	4b64      	ldr	r3, [pc, #400]	; (80008b0 <main+0x4a0>)
 8000720:	0018      	movs	r0, r3
 8000722:	f003 f8f9 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres, si queremos podemos borras esta fucnion
 8000726:	193b      	adds	r3, r7, r4
 8000728:	210a      	movs	r1, #10
 800072a:	0018      	movs	r0, r3
 800072c:	f003 f8c8 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000730:	4b60      	ldr	r3, [pc, #384]	; (80008b4 <main+0x4a4>)
 8000732:	0018      	movs	r0, r3
 8000734:	f003 f8f0 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_2, comodin);//guardamos el telefono 1 en comodin
 8000738:	4b35      	ldr	r3, [pc, #212]	; (8000810 <main+0x400>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	193a      	adds	r2, r7, r4
 800073e:	2101      	movs	r1, #1
 8000740:	0018      	movs	r0, r3
 8000742:	f002 fcd3 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 2:");
 8000746:	4b5c      	ldr	r3, [pc, #368]	; (80008b8 <main+0x4a8>)
 8000748:	0018      	movs	r0, r3
 800074a:	f003 f8e5 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 800074e:	193b      	adds	r3, r7, r4
 8000750:	210a      	movs	r1, #10
 8000752:	0018      	movs	r0, r3
 8000754:	f003 f8b4 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000758:	4b56      	ldr	r3, [pc, #344]	; (80008b4 <main+0x4a4>)
 800075a:	0018      	movs	r0, r3
 800075c:	f003 f8dc 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_3, comodin);//guardamos el telefono 1 en comodin
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <main+0x400>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	193a      	adds	r2, r7, r4
 8000766:	2102      	movs	r1, #2
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fcbf 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 3:");
 800076e:	4b53      	ldr	r3, [pc, #332]	; (80008bc <main+0x4ac>)
 8000770:	0018      	movs	r0, r3
 8000772:	f003 f8d1 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000776:	193b      	adds	r3, r7, r4
 8000778:	210a      	movs	r1, #10
 800077a:	0018      	movs	r0, r3
 800077c:	f003 f8a0 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000780:	4b4c      	ldr	r3, [pc, #304]	; (80008b4 <main+0x4a4>)
 8000782:	0018      	movs	r0, r3
 8000784:	f003 f8c8 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_4, comodin);//guardamos el telefono 1 en comodin
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <main+0x400>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	193a      	adds	r2, r7, r4
 800078e:	2103      	movs	r1, #3
 8000790:	0018      	movs	r0, r3
 8000792:	f002 fcab 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 4:");
 8000796:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <main+0x4b0>)
 8000798:	0018      	movs	r0, r3
 800079a:	f003 f8bd 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	210a      	movs	r1, #10
 80007a2:	0018      	movs	r0, r3
 80007a4:	f003 f88c 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 80007a8:	4b42      	ldr	r3, [pc, #264]	; (80008b4 <main+0x4a4>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f003 f8b4 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_5, comodin);//guardamos el telefono 1 en comodin
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <main+0x400>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	193a      	adds	r2, r7, r4
 80007b6:	2104      	movs	r1, #4
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 fc97 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 5:");
 80007be:	4b41      	ldr	r3, [pc, #260]	; (80008c4 <main+0x4b4>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f003 f8a9 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	210a      	movs	r1, #10
 80007ca:	0018      	movs	r0, r3
 80007cc:	f003 f878 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 80007d0:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <main+0x4a4>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f003 f8a0 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_6, comodin);//guardamos el telefono 1 en comodin
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <main+0x400>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	193a      	adds	r2, r7, r4
 80007de:	2105      	movs	r1, #5
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 fc83 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 6:");
 80007e6:	4b38      	ldr	r3, [pc, #224]	; (80008c8 <main+0x4b8>)
 80007e8:	0018      	movs	r0, r3
 80007ea:	f003 f895 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	210a      	movs	r1, #10
 80007f2:	0018      	movs	r0, r3
 80007f4:	f003 f864 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 80007f8:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <main+0x4a4>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f003 f88c 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_7, comodin);//guardamos el telefono 1 en comodin
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <main+0x400>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	193a      	adds	r2, r7, r4
 8000806:	2106      	movs	r1, #6
 8000808:	0018      	movs	r0, r3
 800080a:	e05f      	b.n	80008cc <main+0x4bc>
 800080c:	fffffc28 	.word	0xfffffc28
 8000810:	20000120 	.word	0x20000120
 8000814:	080042c0 	.word	0x080042c0
 8000818:	080045ec 	.word	0x080045ec
 800081c:	08004614 	.word	0x08004614
 8000820:	0800463c 	.word	0x0800463c
 8000824:	08004664 	.word	0x08004664
 8000828:	fffffee8 	.word	0xfffffee8
 800082c:	0800468c 	.word	0x0800468c
 8000830:	fffffec0 	.word	0xfffffec0
 8000834:	080046b4 	.word	0x080046b4
 8000838:	fffffe98 	.word	0xfffffe98
 800083c:	080046dc 	.word	0x080046dc
 8000840:	fffffe70 	.word	0xfffffe70
 8000844:	08004704 	.word	0x08004704
 8000848:	fffffe48 	.word	0xfffffe48
 800084c:	0800472c 	.word	0x0800472c
 8000850:	fffffe20 	.word	0xfffffe20
 8000854:	08004754 	.word	0x08004754
 8000858:	fffffdf8 	.word	0xfffffdf8
 800085c:	0800477c 	.word	0x0800477c
 8000860:	fffffdd0 	.word	0xfffffdd0
 8000864:	080047a4 	.word	0x080047a4
 8000868:	fffffda8 	.word	0xfffffda8
 800086c:	080047cc 	.word	0x080047cc
 8000870:	fffffd80 	.word	0xfffffd80
 8000874:	fffffd58 	.word	0xfffffd58
 8000878:	fffffd30 	.word	0xfffffd30
 800087c:	080047f4 	.word	0x080047f4
 8000880:	fffffd08 	.word	0xfffffd08
 8000884:	0800481c 	.word	0x0800481c
 8000888:	fffffce0 	.word	0xfffffce0
 800088c:	08004844 	.word	0x08004844
 8000890:	fffffcb8 	.word	0xfffffcb8
 8000894:	0800486c 	.word	0x0800486c
 8000898:	fffffc90 	.word	0xfffffc90
 800089c:	08004894 	.word	0x08004894
 80008a0:	fffffc40 	.word	0xfffffc40
 80008a4:	080048bc 	.word	0x080048bc
 80008a8:	fffffc2c 	.word	0xfffffc2c
 80008ac:	080048d0 	.word	0x080048d0
 80008b0:	080042e8 	.word	0x080042e8
 80008b4:	080042f4 	.word	0x080042f4
 80008b8:	080042f8 	.word	0x080042f8
 80008bc:	08004304 	.word	0x08004304
 80008c0:	08004310 	.word	0x08004310
 80008c4:	0800431c 	.word	0x0800431c
 80008c8:	08004328 	.word	0x08004328
 80008cc:	f002 fc0e 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 7:");
 80008d0:	4bfd      	ldr	r3, [pc, #1012]	; (8000cc8 <main+0x8b8>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f003 f820 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	210a      	movs	r1, #10
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 ffef 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 80008e2:	4bfa      	ldr	r3, [pc, #1000]	; (8000ccc <main+0x8bc>)
 80008e4:	0018      	movs	r0, r3
 80008e6:	f003 f817 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_8, comodin);//guardamos el telefono 1 en comodin
 80008ea:	4bf9      	ldr	r3, [pc, #996]	; (8000cd0 <main+0x8c0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	193a      	adds	r2, r7, r4
 80008f0:	2107      	movs	r1, #7
 80008f2:	0018      	movs	r0, r3
 80008f4:	f002 fbfa 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 8:");
 80008f8:	4bf6      	ldr	r3, [pc, #984]	; (8000cd4 <main+0x8c4>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f003 f80c 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000900:	193b      	adds	r3, r7, r4
 8000902:	210a      	movs	r1, #10
 8000904:	0018      	movs	r0, r3
 8000906:	f002 ffdb 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 800090a:	4bf0      	ldr	r3, [pc, #960]	; (8000ccc <main+0x8bc>)
 800090c:	0018      	movs	r0, r3
 800090e:	f003 f803 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_9, comodin);//guardamos el telefono 1 en comodin
 8000912:	4bef      	ldr	r3, [pc, #956]	; (8000cd0 <main+0x8c0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	193a      	adds	r2, r7, r4
 8000918:	2108      	movs	r1, #8
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fbe6 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 9:");
 8000920:	4bed      	ldr	r3, [pc, #948]	; (8000cd8 <main+0x8c8>)
 8000922:	0018      	movs	r0, r3
 8000924:	f002 fff8 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000928:	193b      	adds	r3, r7, r4
 800092a:	210a      	movs	r1, #10
 800092c:	0018      	movs	r0, r3
 800092e:	f002 ffc7 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000932:	4be6      	ldr	r3, [pc, #920]	; (8000ccc <main+0x8bc>)
 8000934:	0018      	movs	r0, r3
 8000936:	f002 ffef 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_10, comodin);//guardamos el telefono 1 en comodin
 800093a:	4be5      	ldr	r3, [pc, #916]	; (8000cd0 <main+0x8c0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	193a      	adds	r2, r7, r4
 8000940:	2109      	movs	r1, #9
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fbd2 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 10:");
 8000948:	4be4      	ldr	r3, [pc, #912]	; (8000cdc <main+0x8cc>)
 800094a:	0018      	movs	r0, r3
 800094c:	f002 ffe4 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000950:	193b      	adds	r3, r7, r4
 8000952:	210a      	movs	r1, #10
 8000954:	0018      	movs	r0, r3
 8000956:	f002 ffb3 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 800095a:	4bdc      	ldr	r3, [pc, #880]	; (8000ccc <main+0x8bc>)
 800095c:	0018      	movs	r0, r3
 800095e:	f002 ffdb 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_11, comodin);//guardamos el telefono 1 en comodin
 8000962:	4bdb      	ldr	r3, [pc, #876]	; (8000cd0 <main+0x8c0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	193a      	adds	r2, r7, r4
 8000968:	210a      	movs	r1, #10
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fbbe 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 11:");
 8000970:	4bdb      	ldr	r3, [pc, #876]	; (8000ce0 <main+0x8d0>)
 8000972:	0018      	movs	r0, r3
 8000974:	f002 ffd0 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000978:	193b      	adds	r3, r7, r4
 800097a:	210a      	movs	r1, #10
 800097c:	0018      	movs	r0, r3
 800097e:	f002 ff9f 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000982:	4bd2      	ldr	r3, [pc, #840]	; (8000ccc <main+0x8bc>)
 8000984:	0018      	movs	r0, r3
 8000986:	f002 ffc7 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_12, comodin);//guardamos el telefono 1 en comodin
 800098a:	4bd1      	ldr	r3, [pc, #836]	; (8000cd0 <main+0x8c0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	193a      	adds	r2, r7, r4
 8000990:	210b      	movs	r1, #11
 8000992:	0018      	movs	r0, r3
 8000994:	f002 fbaa 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 12:");
 8000998:	4bd2      	ldr	r3, [pc, #840]	; (8000ce4 <main+0x8d4>)
 800099a:	0018      	movs	r0, r3
 800099c:	f002 ffbc 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	210a      	movs	r1, #10
 80009a4:	0018      	movs	r0, r3
 80009a6:	f002 ff8b 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 80009aa:	4bc8      	ldr	r3, [pc, #800]	; (8000ccc <main+0x8bc>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f002 ffb3 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_13, comodin);//guardamos el telefono 1 en comodin
 80009b2:	4bc7      	ldr	r3, [pc, #796]	; (8000cd0 <main+0x8c0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	193a      	adds	r2, r7, r4
 80009b8:	210c      	movs	r1, #12
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 fb96 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 13:");
 80009c0:	4bc9      	ldr	r3, [pc, #804]	; (8000ce8 <main+0x8d8>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f002 ffa8 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	210a      	movs	r1, #10
 80009cc:	0018      	movs	r0, r3
 80009ce:	f002 ff77 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 80009d2:	4bbe      	ldr	r3, [pc, #760]	; (8000ccc <main+0x8bc>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 ff9f 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_14, comodin);//guardamos el telefono 1 en comodin
 80009da:	4bbd      	ldr	r3, [pc, #756]	; (8000cd0 <main+0x8c0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	193a      	adds	r2, r7, r4
 80009e0:	210d      	movs	r1, #13
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 fb82 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 14:");
 80009e8:	4bc0      	ldr	r3, [pc, #768]	; (8000cec <main+0x8dc>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 ff94 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	210a      	movs	r1, #10
 80009f4:	0018      	movs	r0, r3
 80009f6:	f002 ff63 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 80009fa:	4bb4      	ldr	r3, [pc, #720]	; (8000ccc <main+0x8bc>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f002 ff8b 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_15, comodin);//guardamos el telefono 1 en comodin
 8000a02:	4bb3      	ldr	r3, [pc, #716]	; (8000cd0 <main+0x8c0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	193a      	adds	r2, r7, r4
 8000a08:	210e      	movs	r1, #14
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f002 fb6e 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 15:");
 8000a10:	4bb7      	ldr	r3, [pc, #732]	; (8000cf0 <main+0x8e0>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 ff80 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	210a      	movs	r1, #10
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f002 ff4f 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000a22:	4baa      	ldr	r3, [pc, #680]	; (8000ccc <main+0x8bc>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f002 ff77 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_16, comodin);//guardamos el telefono 1 en comodin
 8000a2a:	4ba9      	ldr	r3, [pc, #676]	; (8000cd0 <main+0x8c0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	193a      	adds	r2, r7, r4
 8000a30:	210f      	movs	r1, #15
 8000a32:	0018      	movs	r0, r3
 8000a34:	f002 fb5a 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 16:");
 8000a38:	4bae      	ldr	r3, [pc, #696]	; (8000cf4 <main+0x8e4>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 ff6c 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	210a      	movs	r1, #10
 8000a44:	0018      	movs	r0, r3
 8000a46:	f002 ff3b 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000a4a:	4ba0      	ldr	r3, [pc, #640]	; (8000ccc <main+0x8bc>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 ff63 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_17, comodin);//guardamos el telefono 1 en comodin
 8000a52:	4b9f      	ldr	r3, [pc, #636]	; (8000cd0 <main+0x8c0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	193a      	adds	r2, r7, r4
 8000a58:	2110      	movs	r1, #16
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 fb46 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 17:");
 8000a60:	4ba5      	ldr	r3, [pc, #660]	; (8000cf8 <main+0x8e8>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f002 ff58 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	210a      	movs	r1, #10
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 ff27 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000a72:	4b96      	ldr	r3, [pc, #600]	; (8000ccc <main+0x8bc>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f002 ff4f 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_18, comodin);//guardamos el telefono 1 en comodin
 8000a7a:	4b95      	ldr	r3, [pc, #596]	; (8000cd0 <main+0x8c0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	193a      	adds	r2, r7, r4
 8000a80:	2111      	movs	r1, #17
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fb32 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 18:");
 8000a88:	4b9c      	ldr	r3, [pc, #624]	; (8000cfc <main+0x8ec>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 ff44 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	210a      	movs	r1, #10
 8000a94:	0018      	movs	r0, r3
 8000a96:	f002 ff13 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000a9a:	4b8c      	ldr	r3, [pc, #560]	; (8000ccc <main+0x8bc>)
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 ff3b 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_19, comodin);//guardamos el telefono 1 en comodin
 8000aa2:	4b8b      	ldr	r3, [pc, #556]	; (8000cd0 <main+0x8c0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	193a      	adds	r2, r7, r4
 8000aa8:	2112      	movs	r1, #18
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 fb1e 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 19:");
 8000ab0:	4b93      	ldr	r3, [pc, #588]	; (8000d00 <main+0x8f0>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 ff30 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	210a      	movs	r1, #10
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 feff 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000ac2:	4b82      	ldr	r3, [pc, #520]	; (8000ccc <main+0x8bc>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 ff27 	bl	8003918 <SerialUartSendString>

	  //leer numero 1 desde eeprom
	  eeprom_read_tel_number(hexPage, tel_20, comodin);//guardamos el telefono 1 en comodin
 8000aca:	4b81      	ldr	r3, [pc, #516]	; (8000cd0 <main+0x8c0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	193a      	adds	r2, r7, r4
 8000ad0:	2113      	movs	r1, #19
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 fb0a 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("NUMERO 20:");
 8000ad8:	4b8a      	ldr	r3, [pc, #552]	; (8000d04 <main+0x8f4>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 ff1c 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 10);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000ae0:	193b      	adds	r3, r7, r4
 8000ae2:	210a      	movs	r1, #10
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 feeb 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000aea:	4b78      	ldr	r3, [pc, #480]	; (8000ccc <main+0x8bc>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f002 ff13 	bl	8003918 <SerialUartSendString>




	  eeprom_read_tel_number(hexPage, pass, comodin);//guardamos la contraseña
 8000af2:	4b77      	ldr	r3, [pc, #476]	; (8000cd0 <main+0x8c0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2218      	movs	r2, #24
 8000af8:	18ba      	adds	r2, r7, r2
 8000afa:	b291      	uxth	r1, r2
 8000afc:	193a      	adds	r2, r7, r4
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 faf4 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("contrasena:");
 8000b04:	4b80      	ldr	r3, [pc, #512]	; (8000d08 <main+0x8f8>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 ff06 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 5);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	2105      	movs	r1, #5
 8000b10:	0018      	movs	r0, r3
 8000b12:	f002 fed5 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000b16:	4b6d      	ldr	r3, [pc, #436]	; (8000ccc <main+0x8bc>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f002 fefd 	bl	8003918 <SerialUartSendString>


	  eeprom_read_tel_number(hexPage, mpass, comodin);//guardamos la contraseña maestra
 8000b1e:	4b6c      	ldr	r3, [pc, #432]	; (8000cd0 <main+0x8c0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	193a      	adds	r2, r7, r4
 8000b24:	2115      	movs	r1, #21
 8000b26:	0018      	movs	r0, r3
 8000b28:	f002 fae0 	bl	80030ec <eeprom_read_tel_number>
	  SerialUartSendString("contrasena maestra:");
 8000b2c:	4b77      	ldr	r3, [pc, #476]	; (8000d0c <main+0x8fc>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f002 fef2 	bl	8003918 <SerialUartSendString>
	  imprimir_vector(comodin, 5);//imrpirmios vector comodi y le decimos que tiene 10 caracteres
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2105      	movs	r1, #5
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f002 fec1 	bl	80038c0 <imprimir_vector>
	  SerialUartSendString("\n");
 8000b3e:	4b63      	ldr	r3, [pc, #396]	; (8000ccc <main+0x8bc>)
 8000b40:	0018      	movs	r0, r3
 8000b42:	f002 fee9 	bl	8003918 <SerialUartSendString>

	  SerialUartSendString("Permisos...\n");
 8000b46:	4b72      	ldr	r3, [pc, #456]	; (8000d10 <main+0x900>)
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f002 fee5 	bl	8003918 <SerialUartSendString>

	  readData = eeprom_read_key(hexPage,permiso_n_1);
 8000b4e:	4b60      	ldr	r3, [pc, #384]	; (8000cd0 <main+0x8c0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2100      	movs	r1, #0
 8000b54:	0018      	movs	r0, r3
 8000b56:	f002 f9e9 	bl	8002f2c <eeprom_read_key>
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	4b6d      	ldr	r3, [pc, #436]	; (8000d14 <main+0x904>)
 8000b5e:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 1: %d",readData );
 8000b60:	4b6c      	ldr	r3, [pc, #432]	; (8000d14 <main+0x904>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b6c      	ldr	r3, [pc, #432]	; (8000d18 <main+0x908>)
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f002 feed 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000b6e:	4b57      	ldr	r3, [pc, #348]	; (8000ccc <main+0x8bc>)
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 fed1 	bl	8003918 <SerialUartSendString>

	  readData = eeprom_read_key(hexPage,permiso_n_2);
 8000b76:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <main+0x8c0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f002 f9d5 	bl	8002f2c <eeprom_read_key>
 8000b82:	0002      	movs	r2, r0
 8000b84:	4b63      	ldr	r3, [pc, #396]	; (8000d14 <main+0x904>)
 8000b86:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 2: %d",readData );
 8000b88:	4b62      	ldr	r3, [pc, #392]	; (8000d14 <main+0x904>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b63      	ldr	r3, [pc, #396]	; (8000d1c <main+0x90c>)
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f002 fed9 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000b96:	4b4d      	ldr	r3, [pc, #308]	; (8000ccc <main+0x8bc>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 febd 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_3);
 8000b9e:	4b4c      	ldr	r3, [pc, #304]	; (8000cd0 <main+0x8c0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f002 f9c1 	bl	8002f2c <eeprom_read_key>
 8000baa:	0002      	movs	r2, r0
 8000bac:	4b59      	ldr	r3, [pc, #356]	; (8000d14 <main+0x904>)
 8000bae:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 3: %d",readData );
 8000bb0:	4b58      	ldr	r3, [pc, #352]	; (8000d14 <main+0x904>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b5a      	ldr	r3, [pc, #360]	; (8000d20 <main+0x910>)
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f002 fec5 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000bbe:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <main+0x8bc>)
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f002 fea9 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_4);
 8000bc6:	4b42      	ldr	r3, [pc, #264]	; (8000cd0 <main+0x8c0>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2103      	movs	r1, #3
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f002 f9ad 	bl	8002f2c <eeprom_read_key>
 8000bd2:	0002      	movs	r2, r0
 8000bd4:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <main+0x904>)
 8000bd6:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 4: %d",readData );
 8000bd8:	4b4e      	ldr	r3, [pc, #312]	; (8000d14 <main+0x904>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b51      	ldr	r3, [pc, #324]	; (8000d24 <main+0x914>)
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f002 feb1 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000be6:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <main+0x8bc>)
 8000be8:	0018      	movs	r0, r3
 8000bea:	f002 fe95 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_5);
 8000bee:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <main+0x8c0>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f002 f999 	bl	8002f2c <eeprom_read_key>
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	4b45      	ldr	r3, [pc, #276]	; (8000d14 <main+0x904>)
 8000bfe:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 5: %d",readData );
 8000c00:	4b44      	ldr	r3, [pc, #272]	; (8000d14 <main+0x904>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <main+0x918>)
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f002 fe9d 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <main+0x8bc>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f002 fe81 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_6);
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <main+0x8c0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f002 f985 	bl	8002f2c <eeprom_read_key>
 8000c22:	0002      	movs	r2, r0
 8000c24:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <main+0x904>)
 8000c26:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 6: %d",readData );
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <main+0x904>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	; (8000d2c <main+0x91c>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f002 fe89 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <main+0x8bc>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f002 fe6d 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_6);
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <main+0x8c0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2105      	movs	r1, #5
 8000c44:	0018      	movs	r0, r3
 8000c46:	f002 f971 	bl	8002f2c <eeprom_read_key>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <main+0x904>)
 8000c4e:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 7: %d",readData );
 8000c50:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <main+0x904>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <main+0x920>)
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f002 fe75 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <main+0x8bc>)
 8000c60:	0018      	movs	r0, r3
 8000c62:	f002 fe59 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_8);
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <main+0x8c0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2107      	movs	r1, #7
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f002 f95d 	bl	8002f2c <eeprom_read_key>
 8000c72:	0002      	movs	r2, r0
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <main+0x904>)
 8000c76:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 8: %d",readData );
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <main+0x904>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <main+0x924>)
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f002 fe61 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <main+0x8bc>)
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f002 fe45 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_9);
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <main+0x8c0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2108      	movs	r1, #8
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 f949 	bl	8002f2c <eeprom_read_key>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <main+0x904>)
 8000c9e:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 9: %d",readData );
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <main+0x904>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <main+0x928>)
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f002 fe4d 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <main+0x8bc>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f002 fe31 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_10);
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <main+0x8c0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2109      	movs	r1, #9
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 f935 	bl	8002f2c <eeprom_read_key>
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	e03a      	b.n	8000d3c <main+0x92c>
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	08004334 	.word	0x08004334
 8000ccc:	080042f4 	.word	0x080042f4
 8000cd0:	20000120 	.word	0x20000120
 8000cd4:	08004340 	.word	0x08004340
 8000cd8:	0800434c 	.word	0x0800434c
 8000cdc:	08004358 	.word	0x08004358
 8000ce0:	08004364 	.word	0x08004364
 8000ce4:	08004370 	.word	0x08004370
 8000ce8:	0800437c 	.word	0x0800437c
 8000cec:	08004388 	.word	0x08004388
 8000cf0:	08004394 	.word	0x08004394
 8000cf4:	080043a0 	.word	0x080043a0
 8000cf8:	080043ac 	.word	0x080043ac
 8000cfc:	080043b8 	.word	0x080043b8
 8000d00:	080043c4 	.word	0x080043c4
 8000d04:	080043d0 	.word	0x080043d0
 8000d08:	080043dc 	.word	0x080043dc
 8000d0c:	080043e8 	.word	0x080043e8
 8000d10:	080043fc 	.word	0x080043fc
 8000d14:	20000124 	.word	0x20000124
 8000d18:	0800440c 	.word	0x0800440c
 8000d1c:	08004424 	.word	0x08004424
 8000d20:	0800443c 	.word	0x0800443c
 8000d24:	08004454 	.word	0x08004454
 8000d28:	0800446c 	.word	0x0800446c
 8000d2c:	08004484 	.word	0x08004484
 8000d30:	0800449c 	.word	0x0800449c
 8000d34:	080044b4 	.word	0x080044b4
 8000d38:	080044cc 	.word	0x080044cc
 8000d3c:	4b6c      	ldr	r3, [pc, #432]	; (8000ef0 <main+0xae0>)
 8000d3e:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 10: %d",readData );
 8000d40:	4b6b      	ldr	r3, [pc, #428]	; (8000ef0 <main+0xae0>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <main+0xae4>)
 8000d46:	0011      	movs	r1, r2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f002 fdfd 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000d4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ef8 <main+0xae8>)
 8000d50:	0018      	movs	r0, r3
 8000d52:	f002 fde1 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_11);
 8000d56:	4b69      	ldr	r3, [pc, #420]	; (8000efc <main+0xaec>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	210a      	movs	r1, #10
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f002 f8e5 	bl	8002f2c <eeprom_read_key>
 8000d62:	0002      	movs	r2, r0
 8000d64:	4b62      	ldr	r3, [pc, #392]	; (8000ef0 <main+0xae0>)
 8000d66:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 11: %d",readData );
 8000d68:	4b61      	ldr	r3, [pc, #388]	; (8000ef0 <main+0xae0>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b64      	ldr	r3, [pc, #400]	; (8000f00 <main+0xaf0>)
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 fde9 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000d76:	4b60      	ldr	r3, [pc, #384]	; (8000ef8 <main+0xae8>)
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f002 fdcd 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_12);
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <main+0xaec>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	210b      	movs	r1, #11
 8000d84:	0018      	movs	r0, r3
 8000d86:	f002 f8d1 	bl	8002f2c <eeprom_read_key>
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	4b58      	ldr	r3, [pc, #352]	; (8000ef0 <main+0xae0>)
 8000d8e:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 12: %d",readData );
 8000d90:	4b57      	ldr	r3, [pc, #348]	; (8000ef0 <main+0xae0>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b5b      	ldr	r3, [pc, #364]	; (8000f04 <main+0xaf4>)
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f002 fdd5 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000d9e:	4b56      	ldr	r3, [pc, #344]	; (8000ef8 <main+0xae8>)
 8000da0:	0018      	movs	r0, r3
 8000da2:	f002 fdb9 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_13);
 8000da6:	4b55      	ldr	r3, [pc, #340]	; (8000efc <main+0xaec>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	210c      	movs	r1, #12
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 f8bd 	bl	8002f2c <eeprom_read_key>
 8000db2:	0002      	movs	r2, r0
 8000db4:	4b4e      	ldr	r3, [pc, #312]	; (8000ef0 <main+0xae0>)
 8000db6:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 13: %d",readData );
 8000db8:	4b4d      	ldr	r3, [pc, #308]	; (8000ef0 <main+0xae0>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b52      	ldr	r3, [pc, #328]	; (8000f08 <main+0xaf8>)
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f002 fdc1 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000dc6:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <main+0xae8>)
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f002 fda5 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_14);
 8000dce:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <main+0xaec>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	210d      	movs	r1, #13
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f002 f8a9 	bl	8002f2c <eeprom_read_key>
 8000dda:	0002      	movs	r2, r0
 8000ddc:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <main+0xae0>)
 8000dde:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 14: %d",readData );
 8000de0:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <main+0xae0>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <main+0xafc>)
 8000de6:	0011      	movs	r1, r2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f002 fdad 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000dee:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <main+0xae8>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f002 fd91 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_15);
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <main+0xaec>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	210e      	movs	r1, #14
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f002 f895 	bl	8002f2c <eeprom_read_key>
 8000e02:	0002      	movs	r2, r0
 8000e04:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <main+0xae0>)
 8000e06:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 15: %d",readData );
 8000e08:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <main+0xae0>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b40      	ldr	r3, [pc, #256]	; (8000f10 <main+0xb00>)
 8000e0e:	0011      	movs	r1, r2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f002 fd99 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000e16:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <main+0xae8>)
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f002 fd7d 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_16);
 8000e1e:	4b37      	ldr	r3, [pc, #220]	; (8000efc <main+0xaec>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	210f      	movs	r1, #15
 8000e24:	0018      	movs	r0, r3
 8000e26:	f002 f881 	bl	8002f2c <eeprom_read_key>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <main+0xae0>)
 8000e2e:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 16: %d",readData );
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <main+0xae0>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <main+0xb04>)
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f002 fd85 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <main+0xae8>)
 8000e40:	0018      	movs	r0, r3
 8000e42:	f002 fd69 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_17);
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <main+0xaec>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f002 f86d 	bl	8002f2c <eeprom_read_key>
 8000e52:	0002      	movs	r2, r0
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <main+0xae0>)
 8000e56:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 17: %d",readData );
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <main+0xae0>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <main+0xb08>)
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 fd71 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <main+0xae8>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f002 fd55 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_18);
 8000e6e:	4b23      	ldr	r3, [pc, #140]	; (8000efc <main+0xaec>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2111      	movs	r1, #17
 8000e74:	0018      	movs	r0, r3
 8000e76:	f002 f859 	bl	8002f2c <eeprom_read_key>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <main+0xae0>)
 8000e7e:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 18: %d",readData );
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <main+0xae0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <main+0xb0c>)
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f002 fd5d 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <main+0xae8>)
 8000e90:	0018      	movs	r0, r3
 8000e92:	f002 fd41 	bl	8003918 <SerialUartSendString>
	  readData = eeprom_read_key(hexPage,permiso_n_19);
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <main+0xaec>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2112      	movs	r1, #18
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f002 f845 	bl	8002f2c <eeprom_read_key>
 8000ea2:	0002      	movs	r2, r0
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <main+0xae0>)
 8000ea6:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 19: %d",readData );
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <main+0xae0>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <main+0xb10>)
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f002 fd49 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <main+0xae8>)
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f002 fd2d 	bl	8003918 <SerialUartSendString>

	  readData = eeprom_read_key(hexPage,permiso_n_20);
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <main+0xaec>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2113      	movs	r1, #19
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f002 f831 	bl	8002f2c <eeprom_read_key>
 8000eca:	0002      	movs	r2, r0
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <main+0xae0>)
 8000ece:	601a      	str	r2, [r3, #0]
	  SerialUartSendVarInt("Permiso telefono 20: %d",readData );
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <main+0xae0>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <main+0xb14>)
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f002 fd35 	bl	8003948 <SerialUartSendVarInt>
	  SerialUartSendString("\n");
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <main+0xae8>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f002 fd19 	bl	8003918 <SerialUartSendString>

	  HAL_Delay(30000);
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <main+0xb18>)
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 fa5b 	bl	80013a4 <HAL_Delay>
	  eeprom_read_tel_number(hexPage, tel_1, comodin);//guardamos el telefono 1 en comodin
 8000eee:	e40e      	b.n	800070e <main+0x2fe>
 8000ef0:	20000124 	.word	0x20000124
 8000ef4:	080044e4 	.word	0x080044e4
 8000ef8:	080042f4 	.word	0x080042f4
 8000efc:	20000120 	.word	0x20000120
 8000f00:	080044fc 	.word	0x080044fc
 8000f04:	08004514 	.word	0x08004514
 8000f08:	0800452c 	.word	0x0800452c
 8000f0c:	08004544 	.word	0x08004544
 8000f10:	0800455c 	.word	0x0800455c
 8000f14:	08004574 	.word	0x08004574
 8000f18:	0800458c 	.word	0x0800458c
 8000f1c:	080045a4 	.word	0x080045a4
 8000f20:	080045bc 	.word	0x080045bc
 8000f24:	080045d4 	.word	0x080045d4
 8000f28:	00007530 	.word	0x00007530

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b093      	sub	sp, #76	; 0x4c
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	2414      	movs	r4, #20
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	0018      	movs	r0, r3
 8000f38:	2334      	movs	r3, #52	; 0x34
 8000f3a:	001a      	movs	r2, r3
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	f002 fd41 	bl	80039c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	0018      	movs	r0, r3
 8000f46:	2310      	movs	r3, #16
 8000f48:	001a      	movs	r2, r3
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f002 fd3a 	bl	80039c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f000 fc61 	bl	800181c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	0052      	lsls	r2, r2, #1
 8000f66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	2240      	movs	r2, #64	; 0x40
 8000f72:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 fc99 	bl	80018b4 <HAL_RCC_OscConfig>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f86:	f000 f87d 	bl	8001084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 ff94 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000fac:	1e03      	subs	r3, r0, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000fb0:	f000 f868 	bl	8001084 <Error_Handler>
  }
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b013      	add	sp, #76	; 0x4c
 8000fba:	bd90      	pop	{r4, r7, pc}

08000fbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <MX_USART1_UART_Init+0x98>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000fc8:	22e1      	movs	r2, #225	; 0xe1
 8000fca:	0252      	lsls	r2, r2, #9
 8000fcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8001006:	0018      	movs	r0, r3
 8001008:	f001 fa34 	bl	8002474 <HAL_UART_Init>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d001      	beq.n	8001014 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001010:	f000 f838 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8001016:	2100      	movs	r1, #0
 8001018:	0018      	movs	r0, r3
 800101a:	f001 fe8b 	bl	8002d34 <HAL_UARTEx_SetTxFifoThreshold>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d001      	beq.n	8001026 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001022:	f000 f82f 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <MX_USART1_UART_Init+0x94>)
 8001028:	2100      	movs	r1, #0
 800102a:	0018      	movs	r0, r3
 800102c:	f001 fec2 	bl	8002db4 <HAL_UARTEx_SetRxFifoThreshold>
 8001030:	1e03      	subs	r3, r0, #0
 8001032:	d001      	beq.n	8001038 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001034:	f000 f826 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <MX_USART1_UART_Init+0x94>)
 800103a:	0018      	movs	r0, r3
 800103c:	f001 fe40 	bl	8002cc0 <HAL_UARTEx_DisableFifoMode>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d001      	beq.n	8001048 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001044:	f000 f81e 	bl	8001084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	2000008c 	.word	0x2000008c
 8001054:	40013800 	.word	0x40013800

08001058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_GPIO_Init+0x28>)
 8001060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <MX_GPIO_Init+0x28>)
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <MX_GPIO_Init+0x28>)
 800106c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	40021000 	.word	0x40021000

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x44>)
 8001098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_MspInit+0x44>)
 800109c:	2101      	movs	r1, #1
 800109e:	430a      	orrs	r2, r1
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x44>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2201      	movs	r2, #1
 80010a8:	4013      	ands	r3, r2
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x44>)
 80010b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_MspInit+0x44>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0549      	lsls	r1, r1, #21
 80010b8:	430a      	orrs	r2, r1
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_MspInit+0x44>)
 80010be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	055b      	lsls	r3, r3, #21
 80010c4:	4013      	ands	r3, r2
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b091      	sub	sp, #68	; 0x44
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	232c      	movs	r3, #44	; 0x2c
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	0018      	movs	r0, r3
 80010e6:	2314      	movs	r3, #20
 80010e8:	001a      	movs	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	f002 fc6a 	bl	80039c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	2414      	movs	r4, #20
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	0018      	movs	r0, r3
 80010f6:	2318      	movs	r3, #24
 80010f8:	001a      	movs	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	f002 fc62 	bl	80039c4 <memset>
  if(huart->Instance==USART1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a23      	ldr	r2, [pc, #140]	; (8001194 <HAL_UART_MspInit+0xbc>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d13f      	bne.n	800118a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001110:	193b      	adds	r3, r7, r4
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001116:	193b      	adds	r3, r7, r4
 8001118:	0018      	movs	r0, r3
 800111a:	f001 f885 	bl	8002228 <HAL_RCCEx_PeriphCLKConfig>
 800111e:	1e03      	subs	r3, r0, #0
 8001120:	d001      	beq.n	8001126 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001122:	f7ff ffaf 	bl	8001084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_UART_MspInit+0xc0>)
 8001128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_UART_MspInit+0xc0>)
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	01c9      	lsls	r1, r1, #7
 8001130:	430a      	orrs	r2, r1
 8001132:	641a      	str	r2, [r3, #64]	; 0x40
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_UART_MspInit+0xc0>)
 8001136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	01db      	lsls	r3, r3, #7
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0xc0>)
 8001144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_UART_MspInit+0xc0>)
 8001148:	2101      	movs	r1, #1
 800114a:	430a      	orrs	r2, r1
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_UART_MspInit+0xc0>)
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	2201      	movs	r2, #1
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800115a:	212c      	movs	r1, #44	; 0x2c
 800115c:	187b      	adds	r3, r7, r1
 800115e:	22c0      	movs	r2, #192	; 0xc0
 8001160:	00d2      	lsls	r2, r2, #3
 8001162:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2202      	movs	r2, #2
 8001168:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2201      	movs	r2, #1
 800117a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	187a      	adds	r2, r7, r1
 800117e:	23a0      	movs	r3, #160	; 0xa0
 8001180:	05db      	lsls	r3, r3, #23
 8001182:	0011      	movs	r1, r2
 8001184:	0018      	movs	r0, r3
 8001186:	f000 f9e5 	bl	8001554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b011      	add	sp, #68	; 0x44
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	40013800 	.word	0x40013800
 8001198:	40021000 	.word	0x40021000

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c0:	f000 f8d4 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	18d3      	adds	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f002 fbb8 	bl	8003970 <__errno>
 8001200:	0003      	movs	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	2301      	movs	r3, #1
 8001208:	425b      	negs	r3, r3
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	18d2      	adds	r2, r2, r3
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b006      	add	sp, #24
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20002000 	.word	0x20002000
 800122c:	00000400 	.word	0x00000400
 8001230:	20000128 	.word	0x20000128
 8001234:	20000140 	.word	0x20000140

08001238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <Reset_Handler>:
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <LoopForever+0x2>)
 8001246:	4685      	mov	sp, r0
 8001248:	f7ff fff6 	bl	8001238 <SystemInit>
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <LoopForever+0x6>)
 800124e:	490d      	ldr	r1, [pc, #52]	; (8001284 <LoopForever+0xa>)
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <LoopForever+0xe>)
 8001252:	2300      	movs	r3, #0
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:
 8001256:	58d4      	ldr	r4, [r2, r3]
 8001258:	50c4      	str	r4, [r0, r3]
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:
 800125c:	18c4      	adds	r4, r0, r3
 800125e:	428c      	cmp	r4, r1
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <LoopForever+0x12>)
 8001264:	4c0a      	ldr	r4, [pc, #40]	; (8001290 <LoopForever+0x16>)
 8001266:	2300      	movs	r3, #0
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:
 800126e:	42a2      	cmp	r2, r4
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>
 8001272:	f002 fb83 	bl	800397c <__libc_init_array>
 8001276:	f7ff f8cb 	bl	8000410 <main>

0800127a <LoopForever>:
 800127a:	e7fe      	b.n	800127a <LoopForever>
 800127c:	20002000 	.word	0x20002000
 8001280:	20000000 	.word	0x20000000
 8001284:	20000070 	.word	0x20000070
 8001288:	08004ab4 	.word	0x08004ab4
 800128c:	20000070 	.word	0x20000070
 8001290:	20000140 	.word	0x20000140

08001294 <ADC1_IRQHandler>:
 8001294:	e7fe      	b.n	8001294 <ADC1_IRQHandler>
	...

08001298 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_Init+0x3c>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Init+0x3c>)
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	0049      	lsls	r1, r1, #1
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f810 	bl	80012d8 <HAL_InitTick>
 80012b8:	1e03      	subs	r3, r0, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e001      	b.n	80012c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fee4 	bl	8001090 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	781b      	ldrb	r3, [r3, #0]
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40022000 	.word	0x40022000

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e0:	230f      	movs	r3, #15
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_InitTick+0x88>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d02b      	beq.n	8001348 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <HAL_InitTick+0x8c>)
 80012f2:	681c      	ldr	r4, [r3, #0]
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_InitTick+0x88>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	0019      	movs	r1, r3
 80012fa:	23fa      	movs	r3, #250	; 0xfa
 80012fc:	0098      	lsls	r0, r3, #2
 80012fe:	f7fe ff11 	bl	8000124 <__udivsi3>
 8001302:	0003      	movs	r3, r0
 8001304:	0019      	movs	r1, r3
 8001306:	0020      	movs	r0, r4
 8001308:	f7fe ff0c 	bl	8000124 <__udivsi3>
 800130c:	0003      	movs	r3, r0
 800130e:	0018      	movs	r0, r3
 8001310:	f000 f913 	bl	800153a <HAL_SYSTICK_Config>
 8001314:	1e03      	subs	r3, r0, #0
 8001316:	d112      	bne.n	800133e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b03      	cmp	r3, #3
 800131c:	d80a      	bhi.n	8001334 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	2301      	movs	r3, #1
 8001322:	425b      	negs	r3, r3
 8001324:	2200      	movs	r2, #0
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f8f2 	bl	8001510 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_InitTick+0x90>)
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e00d      	b.n	8001350 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001334:	230f      	movs	r3, #15
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e008      	b.n	8001350 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800133e:	230f      	movs	r3, #15
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	e003      	b.n	8001350 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001348:	230f      	movs	r3, #15
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001350:	230f      	movs	r3, #15
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b005      	add	sp, #20
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	20000008 	.word	0x20000008
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_IncTick+0x1c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	001a      	movs	r2, r3
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x20>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	18d2      	adds	r2, r2, r3
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_IncTick+0x20>)
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	20000008 	.word	0x20000008
 800138c:	2000012c 	.word	0x2000012c

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <HAL_GetTick+0x10>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	2000012c 	.word	0x2000012c

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff fff0 	bl	8001390 <HAL_GetTick>
 80013b0:	0003      	movs	r3, r0
 80013b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3301      	adds	r3, #1
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_Delay+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	001a      	movs	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	189b      	adds	r3, r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	f7ff ffe0 	bl	8001390 <HAL_GetTick>
 80013d0:	0002      	movs	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b004      	add	sp, #16
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	20000008 	.word	0x20000008

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	0002      	movs	r2, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001400:	d828      	bhi.n	8001454 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001402:	4a2f      	ldr	r2, [pc, #188]	; (80014c0 <__NVIC_SetPriority+0xd4>)
 8001404:	1dfb      	adds	r3, r7, #7
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	33c0      	adds	r3, #192	; 0xc0
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	589b      	ldr	r3, [r3, r2]
 8001412:	1dfa      	adds	r2, r7, #7
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	0011      	movs	r1, r2
 8001418:	2203      	movs	r2, #3
 800141a:	400a      	ands	r2, r1
 800141c:	00d2      	lsls	r2, r2, #3
 800141e:	21ff      	movs	r1, #255	; 0xff
 8001420:	4091      	lsls	r1, r2
 8001422:	000a      	movs	r2, r1
 8001424:	43d2      	mvns	r2, r2
 8001426:	401a      	ands	r2, r3
 8001428:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	019b      	lsls	r3, r3, #6
 800142e:	22ff      	movs	r2, #255	; 0xff
 8001430:	401a      	ands	r2, r3
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	0018      	movs	r0, r3
 8001438:	2303      	movs	r3, #3
 800143a:	4003      	ands	r3, r0
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001440:	481f      	ldr	r0, [pc, #124]	; (80014c0 <__NVIC_SetPriority+0xd4>)
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b25b      	sxtb	r3, r3
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	430a      	orrs	r2, r1
 800144c:	33c0      	adds	r3, #192	; 0xc0
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001452:	e031      	b.n	80014b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <__NVIC_SetPriority+0xd8>)
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	0019      	movs	r1, r3
 800145c:	230f      	movs	r3, #15
 800145e:	400b      	ands	r3, r1
 8001460:	3b08      	subs	r3, #8
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3306      	adds	r3, #6
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	18d3      	adds	r3, r2, r3
 800146a:	3304      	adds	r3, #4
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	1dfa      	adds	r2, r7, #7
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	0011      	movs	r1, r2
 8001474:	2203      	movs	r2, #3
 8001476:	400a      	ands	r2, r1
 8001478:	00d2      	lsls	r2, r2, #3
 800147a:	21ff      	movs	r1, #255	; 0xff
 800147c:	4091      	lsls	r1, r2
 800147e:	000a      	movs	r2, r1
 8001480:	43d2      	mvns	r2, r2
 8001482:	401a      	ands	r2, r3
 8001484:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	019b      	lsls	r3, r3, #6
 800148a:	22ff      	movs	r2, #255	; 0xff
 800148c:	401a      	ands	r2, r3
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	0018      	movs	r0, r3
 8001494:	2303      	movs	r3, #3
 8001496:	4003      	ands	r3, r0
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <__NVIC_SetPriority+0xd8>)
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	001c      	movs	r4, r3
 80014a4:	230f      	movs	r3, #15
 80014a6:	4023      	ands	r3, r4
 80014a8:	3b08      	subs	r3, #8
 80014aa:	089b      	lsrs	r3, r3, #2
 80014ac:	430a      	orrs	r2, r1
 80014ae:	3306      	adds	r3, #6
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	18c3      	adds	r3, r0, r3
 80014b4:	3304      	adds	r3, #4
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b003      	add	sp, #12
 80014be:	bd90      	pop	{r4, r7, pc}
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	1e5a      	subs	r2, r3, #1
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	045b      	lsls	r3, r3, #17
 80014d8:	429a      	cmp	r2, r3
 80014da:	d301      	bcc.n	80014e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014dc:	2301      	movs	r3, #1
 80014de:	e010      	b.n	8001502 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <SysTick_Config+0x44>)
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	3a01      	subs	r2, #1
 80014e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e8:	2301      	movs	r3, #1
 80014ea:	425b      	negs	r3, r3
 80014ec:	2103      	movs	r1, #3
 80014ee:	0018      	movs	r0, r3
 80014f0:	f7ff ff7c 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SysTick_Config+0x44>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SysTick_Config+0x44>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b002      	add	sp, #8
 8001508:	bd80      	pop	{r7, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	210f      	movs	r1, #15
 800151c:	187b      	adds	r3, r7, r1
 800151e:	1c02      	adds	r2, r0, #0
 8001520:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	187b      	adds	r3, r7, r1
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	b25b      	sxtb	r3, r3
 800152a:	0011      	movs	r1, r2
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff ff5d 	bl	80013ec <__NVIC_SetPriority>
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff ffbf 	bl	80014c8 <SysTick_Config>
 800154a:	0003      	movs	r3, r0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	e147      	b.n	80017f4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4091      	lsls	r1, r2
 800156e:	000a      	movs	r2, r1
 8001570:	4013      	ands	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <HAL_GPIO_Init+0x28>
 800157a:	e138      	b.n	80017ee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	4013      	ands	r3, r2
 8001584:	2b01      	cmp	r3, #1
 8001586:	d005      	beq.n	8001594 <HAL_GPIO_Init+0x40>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	4013      	ands	r3, r2
 8001590:	2b02      	cmp	r3, #2
 8001592:	d130      	bne.n	80015f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	409a      	lsls	r2, r3
 80015a2:	0013      	movs	r3, r2
 80015a4:	43da      	mvns	r2, r3
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	409a      	lsls	r2, r3
 80015b6:	0013      	movs	r3, r2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ca:	2201      	movs	r2, #1
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	43da      	mvns	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	2201      	movs	r2, #1
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
 80015e8:	0013      	movs	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2203      	movs	r2, #3
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b03      	cmp	r3, #3
 8001600:	d017      	beq.n	8001632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	2203      	movs	r2, #3
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	43da      	mvns	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	0013      	movs	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2203      	movs	r2, #3
 8001638:	4013      	ands	r3, r2
 800163a:	2b02      	cmp	r3, #2
 800163c:	d123      	bne.n	8001686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	08da      	lsrs	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3208      	adds	r2, #8
 8001646:	0092      	lsls	r2, r2, #2
 8001648:	58d3      	ldr	r3, [r2, r3]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	2207      	movs	r2, #7
 8001650:	4013      	ands	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	220f      	movs	r2, #15
 8001656:	409a      	lsls	r2, r3
 8001658:	0013      	movs	r3, r2
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2107      	movs	r1, #7
 800166a:	400b      	ands	r3, r1
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	08da      	lsrs	r2, r3, #3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3208      	adds	r2, #8
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	6939      	ldr	r1, [r7, #16]
 8001684:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	43da      	mvns	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2203      	movs	r2, #3
 80016a4:	401a      	ands	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	029b      	lsls	r3, r3, #10
 80016c2:	4013      	ands	r3, r2
 80016c4:	d100      	bne.n	80016c8 <HAL_GPIO_Init+0x174>
 80016c6:	e092      	b.n	80017ee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016c8:	4a50      	ldr	r2, [pc, #320]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3318      	adds	r3, #24
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	589b      	ldr	r3, [r3, r2]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2203      	movs	r2, #3
 80016da:	4013      	ands	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	220f      	movs	r2, #15
 80016e0:	409a      	lsls	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	43da      	mvns	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	23a0      	movs	r3, #160	; 0xa0
 80016f0:	05db      	lsls	r3, r3, #23
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0x1ca>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a45      	ldr	r2, [pc, #276]	; (8001810 <HAL_GPIO_Init+0x2bc>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d00d      	beq.n	800171a <HAL_GPIO_Init+0x1c6>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a44      	ldr	r2, [pc, #272]	; (8001814 <HAL_GPIO_Init+0x2c0>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d007      	beq.n	8001716 <HAL_GPIO_Init+0x1c2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a43      	ldr	r2, [pc, #268]	; (8001818 <HAL_GPIO_Init+0x2c4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d101      	bne.n	8001712 <HAL_GPIO_Init+0x1be>
 800170e:	2303      	movs	r3, #3
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x1cc>
 8001712:	2305      	movs	r3, #5
 8001714:	e004      	b.n	8001720 <HAL_GPIO_Init+0x1cc>
 8001716:	2302      	movs	r3, #2
 8001718:	e002      	b.n	8001720 <HAL_GPIO_Init+0x1cc>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x1cc>
 800171e:	2300      	movs	r3, #0
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	2103      	movs	r1, #3
 8001724:	400a      	ands	r2, r1
 8001726:	00d2      	lsls	r2, r2, #3
 8001728:	4093      	lsls	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001730:	4936      	ldr	r1, [pc, #216]	; (800180c <HAL_GPIO_Init+0x2b8>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3318      	adds	r3, #24
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_GPIO_Init+0x2b8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	035b      	lsls	r3, r3, #13
 8001756:	4013      	ands	r3, r2
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_GPIO_Init+0x2b8>)
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001768:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_GPIO_Init+0x2b8>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43da      	mvns	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	039b      	lsls	r3, r3, #14
 8001780:	4013      	ands	r3, r2
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_GPIO_Init+0x2b8>)
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <HAL_GPIO_Init+0x2b8>)
 8001794:	2384      	movs	r3, #132	; 0x84
 8001796:	58d3      	ldr	r3, [r2, r3]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43da      	mvns	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	029b      	lsls	r3, r3, #10
 80017ac:	4013      	ands	r3, r2
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017b8:	4914      	ldr	r1, [pc, #80]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80017ba:	2284      	movs	r2, #132	; 0x84
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80017c0:	4a12      	ldr	r2, [pc, #72]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	58d3      	ldr	r3, [r2, r3]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	025b      	lsls	r3, r3, #9
 80017da:	4013      	ands	r3, r2
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017e6:	4909      	ldr	r1, [pc, #36]	; (800180c <HAL_GPIO_Init+0x2b8>)
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	40da      	lsrs	r2, r3
 80017fc:	1e13      	subs	r3, r2, #0
 80017fe:	d000      	beq.n	8001802 <HAL_GPIO_Init+0x2ae>
 8001800:	e6b0      	b.n	8001564 <HAL_GPIO_Init+0x10>
  }
}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b006      	add	sp, #24
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021800 	.word	0x40021800
 8001810:	50000400 	.word	0x50000400
 8001814:	50000800 	.word	0x50000800
 8001818:	50000c00 	.word	0x50000c00

0800181c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a19      	ldr	r2, [pc, #100]	; (8001890 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800182a:	4013      	ands	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	429a      	cmp	r2, r3
 800183e:	d11f      	bne.n	8001880 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	0013      	movs	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	189b      	adds	r3, r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4912      	ldr	r1, [pc, #72]	; (8001898 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800184e:	0018      	movs	r0, r3
 8001850:	f7fe fc68 	bl	8000124 <__udivsi3>
 8001854:	0003      	movs	r3, r0
 8001856:	3301      	adds	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800185a:	e008      	b.n	800186e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3b01      	subs	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e001      	b.n	800186e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e009      	b.n	8001882 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	401a      	ands	r2, r3
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	429a      	cmp	r2, r3
 800187e:	d0ed      	beq.n	800185c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b004      	add	sp, #16
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40007000 	.word	0x40007000
 8001890:	fffff9ff 	.word	0xfffff9ff
 8001894:	20000000 	.word	0x20000000
 8001898:	000f4240 	.word	0x000f4240

0800189c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	23e0      	movs	r3, #224	; 0xe0
 80018a6:	01db      	lsls	r3, r3, #7
 80018a8:	4013      	ands	r3, r2
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e2f3      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2201      	movs	r2, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d100      	bne.n	80018d2 <HAL_RCC_OscConfig+0x1e>
 80018d0:	e07c      	b.n	80019cc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d2:	4bc3      	ldr	r3, [pc, #780]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	2238      	movs	r2, #56	; 0x38
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018dc:	4bc0      	ldr	r3, [pc, #768]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b10      	cmp	r3, #16
 80018ea:	d102      	bne.n	80018f2 <HAL_RCC_OscConfig+0x3e>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d002      	beq.n	80018f8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d10b      	bne.n	8001910 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	4bb9      	ldr	r3, [pc, #740]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	4013      	ands	r3, r2
 8001902:	d062      	beq.n	80019ca <HAL_RCC_OscConfig+0x116>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d15e      	bne.n	80019ca <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e2ce      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	025b      	lsls	r3, r3, #9
 8001918:	429a      	cmp	r2, r3
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x78>
 800191c:	4bb0      	ldr	r3, [pc, #704]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4baf      	ldr	r3, [pc, #700]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	0249      	lsls	r1, r1, #9
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e020      	b.n	800196e <HAL_RCC_OscConfig+0xba>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	23a0      	movs	r3, #160	; 0xa0
 8001932:	02db      	lsls	r3, r3, #11
 8001934:	429a      	cmp	r2, r3
 8001936:	d10e      	bne.n	8001956 <HAL_RCC_OscConfig+0xa2>
 8001938:	4ba9      	ldr	r3, [pc, #676]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4ba8      	ldr	r3, [pc, #672]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	02c9      	lsls	r1, r1, #11
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	4ba6      	ldr	r3, [pc, #664]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4ba5      	ldr	r3, [pc, #660]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	0249      	lsls	r1, r1, #9
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e00b      	b.n	800196e <HAL_RCC_OscConfig+0xba>
 8001956:	4ba2      	ldr	r3, [pc, #648]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4ba1      	ldr	r3, [pc, #644]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 800195c:	49a1      	ldr	r1, [pc, #644]	; (8001be4 <HAL_RCC_OscConfig+0x330>)
 800195e:	400a      	ands	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	4b9f      	ldr	r3, [pc, #636]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001968:	499f      	ldr	r1, [pc, #636]	; (8001be8 <HAL_RCC_OscConfig+0x334>)
 800196a:	400a      	ands	r2, r1
 800196c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d014      	beq.n	80019a0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001976:	f7ff fd0b 	bl	8001390 <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fd06 	bl	8001390 <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e28d      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	4b93      	ldr	r3, [pc, #588]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	029b      	lsls	r3, r3, #10
 800199a:	4013      	ands	r3, r2
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0xcc>
 800199e:	e015      	b.n	80019cc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff fcf6 	bl	8001390 <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019aa:	f7ff fcf1 	bl	8001390 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b64      	cmp	r3, #100	; 0x64
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e278      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019bc:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	029b      	lsls	r3, r3, #10
 80019c4:	4013      	ands	r3, r2
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0xf6>
 80019c8:	e000      	b.n	80019cc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d100      	bne.n	80019d8 <HAL_RCC_OscConfig+0x124>
 80019d6:	e099      	b.n	8001b0c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d8:	4b81      	ldr	r3, [pc, #516]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2238      	movs	r2, #56	; 0x38
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e2:	4b7f      	ldr	r3, [pc, #508]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2203      	movs	r2, #3
 80019e8:	4013      	ands	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d102      	bne.n	80019f8 <HAL_RCC_OscConfig+0x144>
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d002      	beq.n	80019fe <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d135      	bne.n	8001a6a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fe:	4b78      	ldr	r3, [pc, #480]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4013      	ands	r3, r2
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x162>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e24b      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b72      	ldr	r3, [pc, #456]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a74      	ldr	r2, [pc, #464]	; (8001bec <HAL_RCC_OscConfig+0x338>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	021a      	lsls	r2, r3, #8
 8001a26:	4b6e      	ldr	r3, [pc, #440]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d112      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a32:	4b6b      	ldr	r3, [pc, #428]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x33c>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a46:	4b66      	ldr	r3, [pc, #408]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0adb      	lsrs	r3, r3, #11
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	4013      	ands	r3, r2
 8001a50:	4a68      	ldr	r2, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x340>)
 8001a52:	40da      	lsrs	r2, r3
 8001a54:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <HAL_RCC_OscConfig+0x344>)
 8001a56:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a58:	4b68      	ldr	r3, [pc, #416]	; (8001bfc <HAL_RCC_OscConfig+0x348>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff fc3b 	bl	80012d8 <HAL_InitTick>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d051      	beq.n	8001b0a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e221      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d030      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a5e      	ldr	r2, [pc, #376]	; (8001bf0 <HAL_RCC_OscConfig+0x33c>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	4b57      	ldr	r3, [pc, #348]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	430a      	orrs	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a86:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	0049      	lsls	r1, r1, #1
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff fc7c 	bl	8001390 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fc77 	bl	8001390 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1fe      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abc:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a4a      	ldr	r2, [pc, #296]	; (8001bec <HAL_RCC_OscConfig+0x338>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	021a      	lsls	r2, r3, #8
 8001acc:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	e01b      	b.n	8001b0c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ad4:	4b42      	ldr	r3, [pc, #264]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	4949      	ldr	r1, [pc, #292]	; (8001c00 <HAL_RCC_OscConfig+0x34c>)
 8001adc:	400a      	ands	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fc56 	bl	8001390 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff fc51 	bl	8001390 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1d8      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4013      	ands	r3, r2
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x236>
 8001b08:	e000      	b.n	8001b0c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2208      	movs	r2, #8
 8001b12:	4013      	ands	r3, r2
 8001b14:	d047      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2238      	movs	r2, #56	; 0x38
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b18      	cmp	r3, #24
 8001b20:	d10a      	bne.n	8001b38 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b22:	4b2f      	ldr	r3, [pc, #188]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d03c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d138      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e1ba      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d019      	beq.n	8001b74 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	2101      	movs	r1, #1
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fc20 	bl	8001390 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b56:	f7ff fc1b 	bl	8001390 <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1a2      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d0f1      	beq.n	8001b56 <HAL_RCC_OscConfig+0x2a2>
 8001b72:	e018      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001b76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fc06 	bl	8001390 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fc01 	bl	8001390 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e188      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1f1      	bne.n	8001b8a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2204      	movs	r2, #4
 8001bac:	4013      	ands	r3, r2
 8001bae:	d100      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x2fe>
 8001bb0:	e0c6      	b.n	8001d40 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb2:	231f      	movs	r3, #31
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2238      	movs	r2, #56	; 0x38
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	d11e      	bne.n	8001c04 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d100      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x31e>
 8001bd0:	e0b6      	b.n	8001d40 <HAL_RCC_OscConfig+0x48c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d000      	beq.n	8001bdc <HAL_RCC_OscConfig+0x328>
 8001bda:	e0b1      	b.n	8001d40 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e166      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	fffeffff 	.word	0xfffeffff
 8001be8:	fffbffff 	.word	0xfffbffff
 8001bec:	ffff80ff 	.word	0xffff80ff
 8001bf0:	ffffc7ff 	.word	0xffffc7ff
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c04:	4bac      	ldr	r3, [pc, #688]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001c06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	055b      	lsls	r3, r3, #21
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x360>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x362>
 8001c14:	2300      	movs	r3, #0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d011      	beq.n	8001c3e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4ba7      	ldr	r3, [pc, #668]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c1e:	4ba6      	ldr	r3, [pc, #664]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0549      	lsls	r1, r1, #21
 8001c24:	430a      	orrs	r2, r1
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c28:	4ba3      	ldr	r3, [pc, #652]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	055b      	lsls	r3, r3, #21
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001c36:	231f      	movs	r3, #31
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3e:	4b9f      	ldr	r3, [pc, #636]	; (8001ebc <HAL_RCC_OscConfig+0x608>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	d11a      	bne.n	8001c80 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c4a:	4b9c      	ldr	r3, [pc, #624]	; (8001ebc <HAL_RCC_OscConfig+0x608>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b9b      	ldr	r3, [pc, #620]	; (8001ebc <HAL_RCC_OscConfig+0x608>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0049      	lsls	r1, r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fb9a 	bl	8001390 <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7ff fb95 	bl	8001390 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e11c      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c74:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <HAL_RCC_OscConfig+0x608>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3e2>
 8001c88:	4b8b      	ldr	r3, [pc, #556]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001c8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c8c:	4b8a      	ldr	r3, [pc, #552]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	430a      	orrs	r2, r1
 8001c92:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c94:	e01c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x404>
 8001c9e:	4b86      	ldr	r3, [pc, #536]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca2:	4b85      	ldr	r3, [pc, #532]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001ca4:	2104      	movs	r1, #4
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001caa:	4b83      	ldr	r3, [pc, #524]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001cac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cae:	4b82      	ldr	r3, [pc, #520]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
 8001cb8:	4b7f      	ldr	r3, [pc, #508]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001cba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cbc:	4b7e      	ldr	r3, [pc, #504]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	438a      	bics	r2, r1
 8001cc2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cc4:	4b7c      	ldr	r3, [pc, #496]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001cc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cc8:	4b7b      	ldr	r3, [pc, #492]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001cca:	2104      	movs	r1, #4
 8001ccc:	438a      	bics	r2, r1
 8001cce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d014      	beq.n	8001d02 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fb5a 	bl	8001390 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce0:	e009      	b.n	8001cf6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff fb55 	bl	8001390 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	4a74      	ldr	r2, [pc, #464]	; (8001ec0 <HAL_RCC_OscConfig+0x60c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0db      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf6:	4b70      	ldr	r3, [pc, #448]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x42e>
 8001d00:	e013      	b.n	8001d2a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff fb45 	bl	8001390 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d0a:	e009      	b.n	8001d20 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fb40 	bl	8001390 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4a6a      	ldr	r2, [pc, #424]	; (8001ec0 <HAL_RCC_OscConfig+0x60c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0c6      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d20:	4b65      	ldr	r3, [pc, #404]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2202      	movs	r2, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d2a:	231f      	movs	r3, #31
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001d34:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d38:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001d3a:	4962      	ldr	r1, [pc, #392]	; (8001ec4 <HAL_RCC_OscConfig+0x610>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d100      	bne.n	8001d4a <HAL_RCC_OscConfig+0x496>
 8001d48:	e0b0      	b.n	8001eac <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4a:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2238      	movs	r2, #56	; 0x38
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d100      	bne.n	8001d58 <HAL_RCC_OscConfig+0x4a4>
 8001d56:	e078      	b.n	8001e4a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d153      	bne.n	8001e08 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b55      	ldr	r3, [pc, #340]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b54      	ldr	r3, [pc, #336]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001d66:	4958      	ldr	r1, [pc, #352]	; (8001ec8 <HAL_RCC_OscConfig+0x614>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fb10 	bl	8001390 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff fb0b 	bl	8001390 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e092      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	049b      	lsls	r3, r3, #18
 8001d90:	4013      	ands	r3, r2
 8001d92:	d1f0      	bne.n	8001d76 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d94:	4b48      	ldr	r3, [pc, #288]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4a4c      	ldr	r2, [pc, #304]	; (8001ecc <HAL_RCC_OscConfig+0x618>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1a      	ldr	r2, [r3, #32]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	4b3e      	ldr	r3, [pc, #248]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001dc8:	2180      	movs	r1, #128	; 0x80
 8001dca:	0449      	lsls	r1, r1, #17
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001dd0:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001dd6:	2180      	movs	r1, #128	; 0x80
 8001dd8:	0549      	lsls	r1, r1, #21
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff fad7 	bl	8001390 <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff fad2 	bl	8001390 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e059      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	049b      	lsls	r3, r3, #18
 8001e02:	4013      	ands	r3, r2
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x534>
 8001e06:	e051      	b.n	8001eac <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001e0e:	492e      	ldr	r1, [pc, #184]	; (8001ec8 <HAL_RCC_OscConfig+0x614>)
 8001e10:	400a      	ands	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fabc 	bl	8001390 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7ff fab7 	bl	8001390 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e03e      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	049b      	lsls	r3, r3, #18
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001e42:	4923      	ldr	r1, [pc, #140]	; (8001ed0 <HAL_RCC_OscConfig+0x61c>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	e030      	b.n	8001eac <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e02b      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_RCC_OscConfig+0x604>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	401a      	ands	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d11e      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2270      	movs	r2, #112	; 0x70
 8001e6e:	401a      	ands	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d117      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	23fe      	movs	r3, #254	; 0xfe
 8001e7c:	01db      	lsls	r3, r3, #7
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10e      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	23f8      	movs	r3, #248	; 0xf8
 8001e8e:	039b      	lsls	r3, r3, #14
 8001e90:	401a      	ands	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d106      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	0f5b      	lsrs	r3, r3, #29
 8001e9e:	075a      	lsls	r2, r3, #29
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b008      	add	sp, #32
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	00001388 	.word	0x00001388
 8001ec4:	efffffff 	.word	0xefffffff
 8001ec8:	feffffff 	.word	0xfeffffff
 8001ecc:	1fc1808c 	.word	0x1fc1808c
 8001ed0:	effefffc 	.word	0xeffefffc

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0e9      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2207      	movs	r2, #7
 8001eee:	4013      	ands	r3, r2
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d91e      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b73      	ldr	r3, [pc, #460]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2207      	movs	r2, #7
 8001efc:	4393      	bics	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	4b70      	ldr	r3, [pc, #448]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f08:	f7ff fa42 	bl	8001390 <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f10:	e009      	b.n	8001f26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f12:	f7ff fa3d 	bl	8001390 <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	4a6a      	ldr	r2, [pc, #424]	; (80020c8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0ca      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f26:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d1ee      	bne.n	8001f12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d015      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2204      	movs	r2, #4
 8001f44:	4013      	ands	r3, r2
 8001f46:	d006      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f48:	4b60      	ldr	r3, [pc, #384]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b5f      	ldr	r3, [pc, #380]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001f4e:	21e0      	movs	r1, #224	; 0xe0
 8001f50:	01c9      	lsls	r1, r1, #7
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f56:	4b5d      	ldr	r3, [pc, #372]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4a5d      	ldr	r2, [pc, #372]	; (80020d0 <HAL_RCC_ClockConfig+0x1fc>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4b59      	ldr	r3, [pc, #356]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001f66:	430a      	orrs	r2, r1
 8001f68:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	4013      	ands	r3, r2
 8001f72:	d057      	beq.n	8002024 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	029b      	lsls	r3, r3, #10
 8001f84:	4013      	ands	r3, r2
 8001f86:	d12b      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e097      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f94:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	049b      	lsls	r3, r3, #18
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d11f      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e08b      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d113      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e07f      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc4:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc8:	2202      	movs	r2, #2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e074      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd2:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e06d      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe0:	4b3a      	ldr	r3, [pc, #232]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4b37      	ldr	r3, [pc, #220]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff4:	f7ff f9cc 	bl	8001390 <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffc:	e009      	b.n	8002012 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffe:	f7ff f9c7 	bl	8001390 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	4a2f      	ldr	r2, [pc, #188]	; (80020c8 <HAL_RCC_ClockConfig+0x1f4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e054      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2238      	movs	r2, #56	; 0x38
 8002018:	401a      	ands	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	429a      	cmp	r2, r3
 8002022:	d1ec      	bne.n	8001ffe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2207      	movs	r2, #7
 800202a:	4013      	ands	r3, r2
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d21e      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2207      	movs	r2, #7
 8002038:	4393      	bics	r3, r2
 800203a:	0019      	movs	r1, r3
 800203c:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002044:	f7ff f9a4 	bl	8001390 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800204c:	e009      	b.n	8002062 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204e:	f7ff f99f 	bl	8001390 <HAL_GetTick>
 8002052:	0002      	movs	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_RCC_ClockConfig+0x1f4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e02c      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2207      	movs	r2, #7
 8002068:	4013      	ands	r3, r2
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d1ee      	bne.n	800204e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2204      	movs	r2, #4
 8002076:	4013      	ands	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <HAL_RCC_ClockConfig+0x200>)
 8002080:	4013      	ands	r3, r2
 8002082:	0019      	movs	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800208e:	f000 f829 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8002092:	0001      	movs	r1, r0
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	220f      	movs	r2, #15
 800209c:	401a      	ands	r2, r3
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_RCC_ClockConfig+0x204>)
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	58d3      	ldr	r3, [r2, r3]
 80020a4:	221f      	movs	r2, #31
 80020a6:	4013      	ands	r3, r2
 80020a8:	000a      	movs	r2, r1
 80020aa:	40da      	lsrs	r2, r3
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_ClockConfig+0x208>)
 80020ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_ClockConfig+0x20c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7ff f90f 	bl	80012d8 <HAL_InitTick>
 80020ba:	0003      	movs	r3, r0
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40022000 	.word	0x40022000
 80020c8:	00001388 	.word	0x00001388
 80020cc:	40021000 	.word	0x40021000
 80020d0:	fffff0ff 	.word	0xfffff0ff
 80020d4:	ffff8fff 	.word	0xffff8fff
 80020d8:	080048e8 	.word	0x080048e8
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000004 	.word	0x20000004

080020e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2238      	movs	r2, #56	; 0x38
 80020f0:	4013      	ands	r3, r2
 80020f2:	d10f      	bne.n	8002114 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020f4:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0adb      	lsrs	r3, r3, #11
 80020fa:	2207      	movs	r2, #7
 80020fc:	4013      	ands	r3, r2
 80020fe:	2201      	movs	r2, #1
 8002100:	409a      	lsls	r2, r3
 8002102:	0013      	movs	r3, r2
 8002104:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002106:	6839      	ldr	r1, [r7, #0]
 8002108:	4835      	ldr	r0, [pc, #212]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800210a:	f7fe f80b 	bl	8000124 <__udivsi3>
 800210e:	0003      	movs	r3, r0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	e05d      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2238      	movs	r2, #56	; 0x38
 800211a:	4013      	ands	r3, r2
 800211c:	2b08      	cmp	r3, #8
 800211e:	d102      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002120:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	e054      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002126:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2238      	movs	r2, #56	; 0x38
 800212c:	4013      	ands	r3, r2
 800212e:	2b10      	cmp	r3, #16
 8002130:	d138      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2203      	movs	r2, #3
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	2207      	movs	r2, #7
 8002144:	4013      	ands	r3, r2
 8002146:	3301      	adds	r3, #1
 8002148:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d10d      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	4824      	ldr	r0, [pc, #144]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002154:	f7fd ffe6 	bl	8000124 <__udivsi3>
 8002158:	0003      	movs	r3, r0
 800215a:	0019      	movs	r1, r3
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	227f      	movs	r2, #127	; 0x7f
 8002164:	4013      	ands	r3, r2
 8002166:	434b      	muls	r3, r1
 8002168:	617b      	str	r3, [r7, #20]
        break;
 800216a:	e00d      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	481c      	ldr	r0, [pc, #112]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002170:	f7fd ffd8 	bl	8000124 <__udivsi3>
 8002174:	0003      	movs	r3, r0
 8002176:	0019      	movs	r1, r3
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	227f      	movs	r2, #127	; 0x7f
 8002180:	4013      	ands	r3, r2
 8002182:	434b      	muls	r3, r1
 8002184:	617b      	str	r3, [r7, #20]
        break;
 8002186:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	0f5b      	lsrs	r3, r3, #29
 800218e:	2207      	movs	r2, #7
 8002190:	4013      	ands	r3, r2
 8002192:	3301      	adds	r3, #1
 8002194:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f7fd ffc3 	bl	8000124 <__udivsi3>
 800219e:	0003      	movs	r3, r0
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	e015      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2238      	movs	r2, #56	; 0x38
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d103      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	e00b      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2238      	movs	r2, #56	; 0x38
 80021be:	4013      	ands	r3, r2
 80021c0:	2b18      	cmp	r3, #24
 80021c2:	d103      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80021c4:	23fa      	movs	r3, #250	; 0xfa
 80021c6:	01db      	lsls	r3, r3, #7
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	e001      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021d0:	693b      	ldr	r3, [r7, #16]
}
 80021d2:	0018      	movs	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b006      	add	sp, #24
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	40021000 	.word	0x40021000
 80021e0:	00f42400 	.word	0x00f42400
 80021e4:	007a1200 	.word	0x007a1200

080021e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ec:	4b02      	ldr	r3, [pc, #8]	; (80021f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	0018      	movs	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002200:	f7ff fff2 	bl	80021e8 <HAL_RCC_GetHCLKFreq>
 8002204:	0004      	movs	r4, r0
 8002206:	f7ff fb49 	bl	800189c <LL_RCC_GetAPB1Prescaler>
 800220a:	0003      	movs	r3, r0
 800220c:	0b1a      	lsrs	r2, r3, #12
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	58d3      	ldr	r3, [r2, r3]
 8002214:	221f      	movs	r2, #31
 8002216:	4013      	ands	r3, r2
 8002218:	40dc      	lsrs	r4, r3
 800221a:	0023      	movs	r3, r4
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bdb0      	pop	{r4, r5, r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	08004928 	.word	0x08004928

08002228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002230:	2313      	movs	r3, #19
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002238:	2312      	movs	r3, #18
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	4013      	ands	r3, r2
 800224a:	d100      	bne.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800224c:	e0a3      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224e:	2011      	movs	r0, #17
 8002250:	183b      	adds	r3, r7, r0
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002256:	4b7f      	ldr	r3, [pc, #508]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	055b      	lsls	r3, r3, #21
 800225e:	4013      	ands	r3, r2
 8002260:	d110      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b7c      	ldr	r3, [pc, #496]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002266:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	0549      	lsls	r1, r1, #21
 800226c:	430a      	orrs	r2, r1
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002270:	4b78      	ldr	r3, [pc, #480]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	055b      	lsls	r3, r3, #21
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	183b      	adds	r3, r7, r0
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002284:	4b74      	ldr	r3, [pc, #464]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b73      	ldr	r3, [pc, #460]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800228a:	2180      	movs	r1, #128	; 0x80
 800228c:	0049      	lsls	r1, r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002292:	f7ff f87d 	bl	8001390 <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800229a:	e00b      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229c:	f7ff f878 	bl	8001390 <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d904      	bls.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80022aa:	2313      	movs	r3, #19
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	2203      	movs	r2, #3
 80022b0:	701a      	strb	r2, [r3, #0]
        break;
 80022b2:	e005      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022b4:	4b68      	ldr	r3, [pc, #416]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4013      	ands	r3, r2
 80022be:	d0ed      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80022c0:	2313      	movs	r3, #19
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d154      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022ca:	4b62      	ldr	r3, [pc, #392]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022ce:	23c0      	movs	r3, #192	; 0xc0
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d019      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d014      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022e6:	4b5b      	ldr	r3, [pc, #364]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	4a5c      	ldr	r2, [pc, #368]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022f0:	4b58      	ldr	r3, [pc, #352]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022f4:	4b57      	ldr	r3, [pc, #348]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	0249      	lsls	r1, r1, #9
 80022fa:	430a      	orrs	r2, r1
 80022fc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022fe:	4b55      	ldr	r3, [pc, #340]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002302:	4b54      	ldr	r3, [pc, #336]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002304:	4956      	ldr	r1, [pc, #344]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002306:	400a      	ands	r2, r1
 8002308:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800230a:	4b52      	ldr	r3, [pc, #328]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2201      	movs	r2, #1
 8002314:	4013      	ands	r3, r2
 8002316:	d016      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7ff f83a 	bl	8001390 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002320:	e00c      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7ff f835 	bl	8001390 <HAL_GetTick>
 8002326:	0002      	movs	r2, r0
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	4a4d      	ldr	r2, [pc, #308]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d904      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002332:	2313      	movs	r3, #19
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	2203      	movs	r2, #3
 8002338:	701a      	strb	r2, [r3, #0]
            break;
 800233a:	e004      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233c:	4b45      	ldr	r3, [pc, #276]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	2202      	movs	r2, #2
 8002342:	4013      	ands	r3, r2
 8002344:	d0ed      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002346:	2313      	movs	r3, #19
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10a      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002350:	4b40      	ldr	r3, [pc, #256]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	4a41      	ldr	r2, [pc, #260]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002356:	4013      	ands	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002360:	430a      	orrs	r2, r1
 8002362:	65da      	str	r2, [r3, #92]	; 0x5c
 8002364:	e00c      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002366:	2312      	movs	r3, #18
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	2213      	movs	r2, #19
 800236c:	18ba      	adds	r2, r7, r2
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	e005      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002374:	2312      	movs	r3, #18
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2213      	movs	r2, #19
 800237a:	18ba      	adds	r2, r7, r2
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002380:	2311      	movs	r3, #17
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d105      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800238c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002390:	4935      	ldr	r1, [pc, #212]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002392:	400a      	ands	r2, r1
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	4013      	ands	r3, r2
 800239e:	d009      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023a0:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	2203      	movs	r2, #3
 80023a6:	4393      	bics	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4b29      	ldr	r3, [pc, #164]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2220      	movs	r2, #32
 80023ba:	4013      	ands	r3, r2
 80023bc:	d009      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023be:	4b25      	ldr	r3, [pc, #148]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	4a2a      	ldr	r2, [pc, #168]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023ce:	430a      	orrs	r2, r1
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	01db      	lsls	r3, r3, #7
 80023da:	4013      	ands	r3, r2
 80023dc:	d015      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	0899      	lsrs	r1, r3, #2
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023ec:	430a      	orrs	r2, r1
 80023ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	05db      	lsls	r3, r3, #23
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	0249      	lsls	r1, r1, #9
 8002406:	430a      	orrs	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d016      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002426:	430a      	orrs	r2, r1
 8002428:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	01db      	lsls	r3, r3, #7
 8002432:	429a      	cmp	r2, r3
 8002434:	d106      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	0249      	lsls	r1, r1, #9
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002444:	2312      	movs	r3, #18
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	781b      	ldrb	r3, [r3, #0]
}
 800244a:	0018      	movs	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	b006      	add	sp, #24
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	40021000 	.word	0x40021000
 8002458:	40007000 	.word	0x40007000
 800245c:	fffffcff 	.word	0xfffffcff
 8002460:	fffeffff 	.word	0xfffeffff
 8002464:	00001388 	.word	0x00001388
 8002468:	efffffff 	.word	0xefffffff
 800246c:	ffffcfff 	.word	0xffffcfff
 8002470:	ffff3fff 	.word	0xffff3fff

08002474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e046      	b.n	8002514 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2288      	movs	r2, #136	; 0x88
 800248a:	589b      	ldr	r3, [r3, r2]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2284      	movs	r2, #132	; 0x84
 8002494:	2100      	movs	r1, #0
 8002496:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0018      	movs	r0, r3
 800249c:	f7fe fe1c 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2288      	movs	r2, #136	; 0x88
 80024a4:	2124      	movs	r1, #36	; 0x24
 80024a6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2101      	movs	r1, #1
 80024b4:	438a      	bics	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 f8cc 	bl	8002658 <UART_SetConfig>
 80024c0:	0003      	movs	r3, r0
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d101      	bne.n	80024ca <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e024      	b.n	8002514 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fa29 	bl	800292c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	490d      	ldr	r1, [pc, #52]	; (800251c <HAL_UART_Init+0xa8>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	212a      	movs	r1, #42	; 0x2a
 80024f6:	438a      	bics	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 fac1 	bl	8002a94 <UART_CheckIdleState>
 8002512:	0003      	movs	r3, r0
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}
 800251c:	ffffb7ff 	.word	0xffffb7ff

08002520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	1dbb      	adds	r3, r7, #6
 800252e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2288      	movs	r2, #136	; 0x88
 8002534:	589b      	ldr	r3, [r3, r2]
 8002536:	2b20      	cmp	r3, #32
 8002538:	d000      	beq.n	800253c <HAL_UART_Transmit+0x1c>
 800253a:	e088      	b.n	800264e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_UART_Transmit+0x2a>
 8002542:	1dbb      	adds	r3, r7, #6
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e080      	b.n	8002650 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	015b      	lsls	r3, r3, #5
 8002556:	429a      	cmp	r2, r3
 8002558:	d109      	bne.n	800256e <HAL_UART_Transmit+0x4e>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2201      	movs	r2, #1
 8002566:	4013      	ands	r3, r2
 8002568:	d001      	beq.n	800256e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e070      	b.n	8002650 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2290      	movs	r2, #144	; 0x90
 8002572:	2100      	movs	r1, #0
 8002574:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2288      	movs	r2, #136	; 0x88
 800257a:	2121      	movs	r1, #33	; 0x21
 800257c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800257e:	f7fe ff07 	bl	8001390 <HAL_GetTick>
 8002582:	0003      	movs	r3, r0
 8002584:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1dba      	adds	r2, r7, #6
 800258a:	2154      	movs	r1, #84	; 0x54
 800258c:	8812      	ldrh	r2, [r2, #0]
 800258e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1dba      	adds	r2, r7, #6
 8002594:	2156      	movs	r1, #86	; 0x56
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	2380      	movs	r3, #128	; 0x80
 80025a0:	015b      	lsls	r3, r3, #5
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d108      	bne.n	80025b8 <HAL_UART_Transmit+0x98>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	e003      	b.n	80025c0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025c0:	e02c      	b.n	800261c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	0013      	movs	r3, r2
 80025cc:	2200      	movs	r2, #0
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	f000 faae 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 80025d4:	1e03      	subs	r3, r0, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e039      	b.n	8002650 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10b      	bne.n	80025fa <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	001a      	movs	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	05d2      	lsls	r2, r2, #23
 80025ee:	0dd2      	lsrs	r2, r2, #23
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	3302      	adds	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e007      	b.n	800260a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	3301      	adds	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2256      	movs	r2, #86	; 0x56
 800260e:	5a9b      	ldrh	r3, [r3, r2]
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b299      	uxth	r1, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2256      	movs	r2, #86	; 0x56
 800261a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2256      	movs	r2, #86	; 0x56
 8002620:	5a9b      	ldrh	r3, [r3, r2]
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1cc      	bne.n	80025c2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	0013      	movs	r3, r2
 8002632:	2200      	movs	r2, #0
 8002634:	2140      	movs	r1, #64	; 0x40
 8002636:	f000 fa7b 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d001      	beq.n	8002642 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e006      	b.n	8002650 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2288      	movs	r2, #136	; 0x88
 8002646:	2120      	movs	r1, #32
 8002648:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e000      	b.n	8002650 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800264e:	2302      	movs	r3, #2
  }
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b008      	add	sp, #32
 8002656:	bd80      	pop	{r7, pc}

08002658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002660:	231a      	movs	r3, #26
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	4313      	orrs	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4aa1      	ldr	r2, [pc, #644]	; (800290c <UART_SetConfig+0x2b4>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4a9c      	ldr	r2, [pc, #624]	; (8002910 <UART_SetConfig+0x2b8>)
 800269e:	4013      	ands	r3, r2
 80026a0:	0019      	movs	r1, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4a93      	ldr	r2, [pc, #588]	; (8002914 <UART_SetConfig+0x2bc>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	220f      	movs	r2, #15
 80026dc:	4393      	bics	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a89      	ldr	r2, [pc, #548]	; (8002918 <UART_SetConfig+0x2c0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d127      	bne.n	8002746 <UART_SetConfig+0xee>
 80026f6:	4b89      	ldr	r3, [pc, #548]	; (800291c <UART_SetConfig+0x2c4>)
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	2203      	movs	r2, #3
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d017      	beq.n	8002732 <UART_SetConfig+0xda>
 8002702:	d81b      	bhi.n	800273c <UART_SetConfig+0xe4>
 8002704:	2b02      	cmp	r3, #2
 8002706:	d00a      	beq.n	800271e <UART_SetConfig+0xc6>
 8002708:	d818      	bhi.n	800273c <UART_SetConfig+0xe4>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <UART_SetConfig+0xbc>
 800270e:	2b01      	cmp	r3, #1
 8002710:	d00a      	beq.n	8002728 <UART_SetConfig+0xd0>
 8002712:	e013      	b.n	800273c <UART_SetConfig+0xe4>
 8002714:	231b      	movs	r3, #27
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e021      	b.n	8002762 <UART_SetConfig+0x10a>
 800271e:	231b      	movs	r3, #27
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e01c      	b.n	8002762 <UART_SetConfig+0x10a>
 8002728:	231b      	movs	r3, #27
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2204      	movs	r2, #4
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e017      	b.n	8002762 <UART_SetConfig+0x10a>
 8002732:	231b      	movs	r3, #27
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	2208      	movs	r2, #8
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	e012      	b.n	8002762 <UART_SetConfig+0x10a>
 800273c:	231b      	movs	r3, #27
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2210      	movs	r2, #16
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e00d      	b.n	8002762 <UART_SetConfig+0x10a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a75      	ldr	r2, [pc, #468]	; (8002920 <UART_SetConfig+0x2c8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d104      	bne.n	800275a <UART_SetConfig+0x102>
 8002750:	231b      	movs	r3, #27
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	e003      	b.n	8002762 <UART_SetConfig+0x10a>
 800275a:	231b      	movs	r3, #27
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2210      	movs	r2, #16
 8002760:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	429a      	cmp	r2, r3
 800276c:	d000      	beq.n	8002770 <UART_SetConfig+0x118>
 800276e:	e065      	b.n	800283c <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002770:	231b      	movs	r3, #27
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d015      	beq.n	80027a6 <UART_SetConfig+0x14e>
 800277a:	dc18      	bgt.n	80027ae <UART_SetConfig+0x156>
 800277c:	2b04      	cmp	r3, #4
 800277e:	d00d      	beq.n	800279c <UART_SetConfig+0x144>
 8002780:	dc15      	bgt.n	80027ae <UART_SetConfig+0x156>
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <UART_SetConfig+0x134>
 8002786:	2b02      	cmp	r3, #2
 8002788:	d005      	beq.n	8002796 <UART_SetConfig+0x13e>
 800278a:	e010      	b.n	80027ae <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800278c:	f7ff fd36 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8002790:	0003      	movs	r3, r0
 8002792:	617b      	str	r3, [r7, #20]
        break;
 8002794:	e012      	b.n	80027bc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <UART_SetConfig+0x2cc>)
 8002798:	617b      	str	r3, [r7, #20]
        break;
 800279a:	e00f      	b.n	80027bc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800279c:	f7ff fca2 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 80027a0:	0003      	movs	r3, r0
 80027a2:	617b      	str	r3, [r7, #20]
        break;
 80027a4:	e00a      	b.n	80027bc <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	617b      	str	r3, [r7, #20]
        break;
 80027ac:	e006      	b.n	80027bc <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80027b2:	231a      	movs	r3, #26
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
        break;
 80027ba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d100      	bne.n	80027c4 <UART_SetConfig+0x16c>
 80027c2:	e08d      	b.n	80028e0 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c8:	4b57      	ldr	r3, [pc, #348]	; (8002928 <UART_SetConfig+0x2d0>)
 80027ca:	0052      	lsls	r2, r2, #1
 80027cc:	5ad3      	ldrh	r3, [r2, r3]
 80027ce:	0019      	movs	r1, r3
 80027d0:	6978      	ldr	r0, [r7, #20]
 80027d2:	f7fd fca7 	bl	8000124 <__udivsi3>
 80027d6:	0003      	movs	r3, r0
 80027d8:	005a      	lsls	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	18d2      	adds	r2, r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0019      	movs	r1, r3
 80027e8:	0010      	movs	r0, r2
 80027ea:	f7fd fc9b 	bl	8000124 <__udivsi3>
 80027ee:	0003      	movs	r3, r0
 80027f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d91c      	bls.n	8002832 <UART_SetConfig+0x1da>
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	025b      	lsls	r3, r3, #9
 80027fe:	429a      	cmp	r2, r3
 8002800:	d217      	bcs.n	8002832 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	b29a      	uxth	r2, r3
 8002806:	200e      	movs	r0, #14
 8002808:	183b      	adds	r3, r7, r0
 800280a:	210f      	movs	r1, #15
 800280c:	438a      	bics	r2, r1
 800280e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	b29b      	uxth	r3, r3
 8002816:	2207      	movs	r2, #7
 8002818:	4013      	ands	r3, r2
 800281a:	b299      	uxth	r1, r3
 800281c:	183b      	adds	r3, r7, r0
 800281e:	183a      	adds	r2, r7, r0
 8002820:	8812      	ldrh	r2, [r2, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	183a      	adds	r2, r7, r0
 800282c:	8812      	ldrh	r2, [r2, #0]
 800282e:	60da      	str	r2, [r3, #12]
 8002830:	e056      	b.n	80028e0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002832:	231a      	movs	r3, #26
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
 800283a:	e051      	b.n	80028e0 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 800283c:	231b      	movs	r3, #27
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b08      	cmp	r3, #8
 8002844:	d015      	beq.n	8002872 <UART_SetConfig+0x21a>
 8002846:	dc18      	bgt.n	800287a <UART_SetConfig+0x222>
 8002848:	2b04      	cmp	r3, #4
 800284a:	d00d      	beq.n	8002868 <UART_SetConfig+0x210>
 800284c:	dc15      	bgt.n	800287a <UART_SetConfig+0x222>
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <UART_SetConfig+0x200>
 8002852:	2b02      	cmp	r3, #2
 8002854:	d005      	beq.n	8002862 <UART_SetConfig+0x20a>
 8002856:	e010      	b.n	800287a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002858:	f7ff fcd0 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 800285c:	0003      	movs	r3, r0
 800285e:	617b      	str	r3, [r7, #20]
        break;
 8002860:	e012      	b.n	8002888 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <UART_SetConfig+0x2cc>)
 8002864:	617b      	str	r3, [r7, #20]
        break;
 8002866:	e00f      	b.n	8002888 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002868:	f7ff fc3c 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 800286c:	0003      	movs	r3, r0
 800286e:	617b      	str	r3, [r7, #20]
        break;
 8002870:	e00a      	b.n	8002888 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	021b      	lsls	r3, r3, #8
 8002876:	617b      	str	r3, [r7, #20]
        break;
 8002878:	e006      	b.n	8002888 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800287e:	231a      	movs	r3, #26
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
        break;
 8002886:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d028      	beq.n	80028e0 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002892:	4b25      	ldr	r3, [pc, #148]	; (8002928 <UART_SetConfig+0x2d0>)
 8002894:	0052      	lsls	r2, r2, #1
 8002896:	5ad3      	ldrh	r3, [r2, r3]
 8002898:	0019      	movs	r1, r3
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f7fd fc42 	bl	8000124 <__udivsi3>
 80028a0:	0003      	movs	r3, r0
 80028a2:	001a      	movs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	18d2      	adds	r2, r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0019      	movs	r1, r3
 80028b2:	0010      	movs	r0, r2
 80028b4:	f7fd fc36 	bl	8000124 <__udivsi3>
 80028b8:	0003      	movs	r3, r0
 80028ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	d90a      	bls.n	80028d8 <UART_SetConfig+0x280>
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	025b      	lsls	r3, r3, #9
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d205      	bcs.n	80028d8 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	e003      	b.n	80028e0 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80028d8:	231a      	movs	r3, #26
 80028da:	18fb      	adds	r3, r7, r3
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	226a      	movs	r2, #106	; 0x6a
 80028e4:	2101      	movs	r1, #1
 80028e6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2268      	movs	r2, #104	; 0x68
 80028ec:	2101      	movs	r1, #1
 80028ee:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80028fc:	231a      	movs	r3, #26
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	781b      	ldrb	r3, [r3, #0]
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b008      	add	sp, #32
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	cfff69f3 	.word	0xcfff69f3
 8002910:	ffffcfff 	.word	0xffffcfff
 8002914:	11fff4ff 	.word	0x11fff4ff
 8002918:	40013800 	.word	0x40013800
 800291c:	40021000 	.word	0x40021000
 8002920:	40004400 	.word	0x40004400
 8002924:	00f42400 	.word	0x00f42400
 8002928:	08004948 	.word	0x08004948

0800292c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	d00b      	beq.n	8002956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a4a      	ldr	r2, [pc, #296]	; (8002a70 <UART_AdvFeatureConfig+0x144>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	2202      	movs	r2, #2
 800295c:	4013      	ands	r3, r2
 800295e:	d00b      	beq.n	8002978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <UART_AdvFeatureConfig+0x148>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	2204      	movs	r2, #4
 800297e:	4013      	ands	r3, r2
 8002980:	d00b      	beq.n	800299a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a3b      	ldr	r2, [pc, #236]	; (8002a78 <UART_AdvFeatureConfig+0x14c>)
 800298a:	4013      	ands	r3, r2
 800298c:	0019      	movs	r1, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	2208      	movs	r2, #8
 80029a0:	4013      	ands	r3, r2
 80029a2:	d00b      	beq.n	80029bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a34      	ldr	r2, [pc, #208]	; (8002a7c <UART_AdvFeatureConfig+0x150>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	2210      	movs	r2, #16
 80029c2:	4013      	ands	r3, r2
 80029c4:	d00b      	beq.n	80029de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a2c      	ldr	r2, [pc, #176]	; (8002a80 <UART_AdvFeatureConfig+0x154>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	2220      	movs	r2, #32
 80029e4:	4013      	ands	r3, r2
 80029e6:	d00b      	beq.n	8002a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	4a25      	ldr	r2, [pc, #148]	; (8002a84 <UART_AdvFeatureConfig+0x158>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	4013      	ands	r3, r2
 8002a08:	d01d      	beq.n	8002a46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <UART_AdvFeatureConfig+0x15c>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	0019      	movs	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	035b      	lsls	r3, r3, #13
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d10b      	bne.n	8002a46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <UART_AdvFeatureConfig+0x160>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d00b      	beq.n	8002a68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <UART_AdvFeatureConfig+0x164>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	0019      	movs	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	605a      	str	r2, [r3, #4]
  }
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	fffdffff 	.word	0xfffdffff
 8002a74:	fffeffff 	.word	0xfffeffff
 8002a78:	fffbffff 	.word	0xfffbffff
 8002a7c:	ffff7fff 	.word	0xffff7fff
 8002a80:	ffffefff 	.word	0xffffefff
 8002a84:	ffffdfff 	.word	0xffffdfff
 8002a88:	ffefffff 	.word	0xffefffff
 8002a8c:	ff9fffff 	.word	0xff9fffff
 8002a90:	fff7ffff 	.word	0xfff7ffff

08002a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af02      	add	r7, sp, #8
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2290      	movs	r2, #144	; 0x90
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002aa4:	f7fe fc74 	bl	8001390 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d10c      	bne.n	8002ad4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	0391      	lsls	r1, r2, #14
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <UART_CheckIdleState+0x98>)
 8002ac4:	9200      	str	r2, [sp, #0]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f000 f832 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d001      	beq.n	8002ad4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e026      	b.n	8002b22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2204      	movs	r2, #4
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d10c      	bne.n	8002afc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	03d1      	lsls	r1, r2, #15
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4a10      	ldr	r2, [pc, #64]	; (8002b2c <UART_CheckIdleState+0x98>)
 8002aec:	9200      	str	r2, [sp, #0]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f000 f81e 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 8002af4:	1e03      	subs	r3, r0, #0
 8002af6:	d001      	beq.n	8002afc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e012      	b.n	8002b22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2288      	movs	r2, #136	; 0x88
 8002b00:	2120      	movs	r1, #32
 8002b02:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	228c      	movs	r2, #140	; 0x8c
 8002b08:	2120      	movs	r1, #32
 8002b0a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2284      	movs	r2, #132	; 0x84
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b004      	add	sp, #16
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	01ffffff 	.word	0x01ffffff

08002b30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b094      	sub	sp, #80	; 0x50
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b40:	e0a7      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b44:	3301      	adds	r3, #1
 8002b46:	d100      	bne.n	8002b4a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002b48:	e0a3      	b.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe fc21 	bl	8001390 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d13f      	bne.n	8002be0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b60:	f3ef 8310 	mrs	r3, PRIMASK
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b68:	647b      	str	r3, [r7, #68]	; 0x44
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	f383 8810 	msr	PRIMASK, r3
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	494e      	ldr	r1, [pc, #312]	; (8002cbc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002b82:	400a      	ands	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	f383 8810 	msr	PRIMASK, r3
}
 8002b90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b92:	f3ef 8310 	mrs	r3, PRIMASK
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba2:	f383 8810 	msr	PRIMASK, r3
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbe:	f383 8810 	msr	PRIMASK, r3
}
 8002bc2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2288      	movs	r2, #136	; 0x88
 8002bc8:	2120      	movs	r1, #32
 8002bca:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	228c      	movs	r2, #140	; 0x8c
 8002bd0:	2120      	movs	r1, #32
 8002bd2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2284      	movs	r2, #132	; 0x84
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e069      	b.n	8002cb4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2204      	movs	r2, #4
 8002be8:	4013      	ands	r3, r2
 8002bea:	d052      	beq.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d148      	bne.n	8002c92 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	0112      	lsls	r2, r2, #4
 8002c08:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c0e:	613b      	str	r3, [r7, #16]
  return(result);
 8002c10:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c14:	2301      	movs	r3, #1
 8002c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4924      	ldr	r1, [pc, #144]	; (8002cbc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f383 8810 	msr	PRIMASK, r3
}
 8002c3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c40:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c42:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c44:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c46:	2301      	movs	r3, #1
 8002c48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	f383 8810 	msr	PRIMASK, r3
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	438a      	bics	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2288      	movs	r2, #136	; 0x88
 8002c72:	2120      	movs	r1, #32
 8002c74:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	228c      	movs	r2, #140	; 0x8c
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2290      	movs	r2, #144	; 0x90
 8002c82:	2120      	movs	r1, #32
 8002c84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2284      	movs	r2, #132	; 0x84
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e010      	b.n	8002cb4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	425a      	negs	r2, r3
 8002ca2:	4153      	adcs	r3, r2
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d100      	bne.n	8002cb2 <UART_WaitOnFlagUntilTimeout+0x182>
 8002cb0:	e747      	b.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b014      	add	sp, #80	; 0x50
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	fffffe5f 	.word	0xfffffe5f

08002cc0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2284      	movs	r2, #132	; 0x84
 8002ccc:	5c9b      	ldrb	r3, [r3, r2]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UARTEx_DisableFifoMode+0x16>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e027      	b.n	8002d26 <HAL_UARTEx_DisableFifoMode+0x66>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2284      	movs	r2, #132	; 0x84
 8002cda:	2101      	movs	r1, #1
 8002cdc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2288      	movs	r2, #136	; 0x88
 8002ce2:	2124      	movs	r1, #36	; 0x24
 8002ce4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	438a      	bics	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2288      	movs	r2, #136	; 0x88
 8002d18:	2120      	movs	r1, #32
 8002d1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2284      	movs	r2, #132	; 0x84
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	dfffffff 	.word	0xdfffffff

08002d34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2284      	movs	r2, #132	; 0x84
 8002d42:	5c9b      	ldrb	r3, [r3, r2]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e02e      	b.n	8002daa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2284      	movs	r2, #132	; 0x84
 8002d50:	2101      	movs	r1, #1
 8002d52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2288      	movs	r2, #136	; 0x88
 8002d58:	2124      	movs	r1, #36	; 0x24
 8002d5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2101      	movs	r1, #1
 8002d70:	438a      	bics	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	08d9      	lsrs	r1, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 f854 	bl	8002e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2288      	movs	r2, #136	; 0x88
 8002d9c:	2120      	movs	r1, #32
 8002d9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2284      	movs	r2, #132	; 0x84
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2284      	movs	r2, #132	; 0x84
 8002dc2:	5c9b      	ldrb	r3, [r3, r2]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e02f      	b.n	8002e2c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2284      	movs	r2, #132	; 0x84
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2288      	movs	r2, #136	; 0x88
 8002dd8:	2124      	movs	r1, #36	; 0x24
 8002dda:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2101      	movs	r1, #1
 8002df0:	438a      	bics	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 f813 	bl	8002e38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2288      	movs	r2, #136	; 0x88
 8002e1e:	2120      	movs	r1, #32
 8002e20:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2284      	movs	r2, #132	; 0x84
 8002e26:	2100      	movs	r1, #0
 8002e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	f1ffffff 	.word	0xf1ffffff

08002e38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d108      	bne.n	8002e5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	226a      	movs	r2, #106	; 0x6a
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2268      	movs	r2, #104	; 0x68
 8002e54:	2101      	movs	r1, #1
 8002e56:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002e58:	e043      	b.n	8002ee2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002e5a:	260f      	movs	r6, #15
 8002e5c:	19bb      	adds	r3, r7, r6
 8002e5e:	2208      	movs	r2, #8
 8002e60:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002e62:	200e      	movs	r0, #14
 8002e64:	183b      	adds	r3, r7, r0
 8002e66:	2208      	movs	r2, #8
 8002e68:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	0e5b      	lsrs	r3, r3, #25
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	240d      	movs	r4, #13
 8002e76:	193b      	adds	r3, r7, r4
 8002e78:	2107      	movs	r1, #7
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	0f5b      	lsrs	r3, r3, #29
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	250c      	movs	r5, #12
 8002e8a:	197b      	adds	r3, r7, r5
 8002e8c:	2107      	movs	r1, #7
 8002e8e:	400a      	ands	r2, r1
 8002e90:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e92:	183b      	adds	r3, r7, r0
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	197a      	adds	r2, r7, r5
 8002e98:	7812      	ldrb	r2, [r2, #0]
 8002e9a:	4914      	ldr	r1, [pc, #80]	; (8002eec <UARTEx_SetNbDataToProcess+0xb4>)
 8002e9c:	5c8a      	ldrb	r2, [r1, r2]
 8002e9e:	435a      	muls	r2, r3
 8002ea0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002ea2:	197b      	adds	r3, r7, r5
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <UARTEx_SetNbDataToProcess+0xb8>)
 8002ea8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002eaa:	0019      	movs	r1, r3
 8002eac:	f7fd f9c4 	bl	8000238 <__divsi3>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	b299      	uxth	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	226a      	movs	r2, #106	; 0x6a
 8002eb8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002eba:	19bb      	adds	r3, r7, r6
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	193a      	adds	r2, r7, r4
 8002ec0:	7812      	ldrb	r2, [r2, #0]
 8002ec2:	490a      	ldr	r1, [pc, #40]	; (8002eec <UARTEx_SetNbDataToProcess+0xb4>)
 8002ec4:	5c8a      	ldrb	r2, [r1, r2]
 8002ec6:	435a      	muls	r2, r3
 8002ec8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4a08      	ldr	r2, [pc, #32]	; (8002ef0 <UARTEx_SetNbDataToProcess+0xb8>)
 8002ed0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	f7fd f9b0 	bl	8000238 <__divsi3>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	b299      	uxth	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2268      	movs	r2, #104	; 0x68
 8002ee0:	5299      	strh	r1, [r3, r2]
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b005      	add	sp, #20
 8002ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	08004960 	.word	0x08004960
 8002ef0:	08004968 	.word	0x08004968

08002ef4 <getHexAddressPage>:

#include "eeprom_mamalona.h"//incluimos la libreria de eeprom mamalona
#include  "serial_uart.h"

#define flash_delay 10
uint32_t getHexAddressPage(int dataPage){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	uint32_t bits       = PAGE_SECTOR * dataPage;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	02db      	lsls	r3, r3, #11
 8002f00:	60fb      	str	r3, [r7, #12]
	uint32_t hexAddress = FLASH_INIT + bits;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2280      	movs	r2, #128	; 0x80
 8002f06:	0512      	lsls	r2, r2, #20
 8002f08:	4694      	mov	ip, r2
 8002f0a:	4463      	add	r3, ip
 8002f0c:	60bb      	str	r3, [r7, #8]
	return hexAddress;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <retrieveDataFromAddress>:
	HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, hexPage + (DATA_SPACE*2), dataC);

	HAL_FLASH_Lock();
}

uint32_t retrieveDataFromAddress(uint32_t hexAddress){
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	return *(uint32_t*)hexAddress;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <eeprom_read_key>:

/*Funcion para leer los permisos de cada numero*/

uint32_t eeprom_read_key(uint32_t hexPage,uint16_t index)

{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	000a      	movs	r2, r1
 8002f36:	1cbb      	adds	r3, r7, #2
 8002f38:	801a      	strh	r2, [r3, #0]

switch(index)
 8002f3a:	1cbb      	adds	r3, r7, #2
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	2b13      	cmp	r3, #19
 8002f40:	d900      	bls.n	8002f44 <eeprom_read_key+0x18>
 8002f42:	e0cc      	b.n	80030de <eeprom_read_key+0x1b2>
 8002f44:	009a      	lsls	r2, r3, #2
 8002f46:	4b68      	ldr	r3, [pc, #416]	; (80030e8 <eeprom_read_key+0x1bc>)
 8002f48:	18d3      	adds	r3, r2, r3
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	469f      	mov	pc, r3
{

case permiso_n_1 :

	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 210));//key 1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	22d2      	movs	r2, #210	; 0xd2
 8002f52:	00d2      	lsls	r2, r2, #3
 8002f54:	4694      	mov	ip, r2
 8002f56:	4463      	add	r3, ip
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f7ff ffdd 	bl	8002f18 <retrieveDataFromAddress>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	e0be      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;


case permiso_n_2:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 211));//key 1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	22d3      	movs	r2, #211	; 0xd3
 8002f66:	00d2      	lsls	r2, r2, #3
 8002f68:	4694      	mov	ip, r2
 8002f6a:	4463      	add	r3, ip
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7ff ffd3 	bl	8002f18 <retrieveDataFromAddress>
 8002f72:	0003      	movs	r3, r0
 8002f74:	e0b4      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_3:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 212));//key 1
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	22d4      	movs	r2, #212	; 0xd4
 8002f7a:	00d2      	lsls	r2, r2, #3
 8002f7c:	4694      	mov	ip, r2
 8002f7e:	4463      	add	r3, ip
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff ffc9 	bl	8002f18 <retrieveDataFromAddress>
 8002f86:	0003      	movs	r3, r0
 8002f88:	e0aa      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_4:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 213));//key 1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	22d5      	movs	r2, #213	; 0xd5
 8002f8e:	00d2      	lsls	r2, r2, #3
 8002f90:	4694      	mov	ip, r2
 8002f92:	4463      	add	r3, ip
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff ffbf 	bl	8002f18 <retrieveDataFromAddress>
 8002f9a:	0003      	movs	r3, r0
 8002f9c:	e0a0      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_5:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 214));//key 1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	22d6      	movs	r2, #214	; 0xd6
 8002fa2:	00d2      	lsls	r2, r2, #3
 8002fa4:	4694      	mov	ip, r2
 8002fa6:	4463      	add	r3, ip
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff ffb5 	bl	8002f18 <retrieveDataFromAddress>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	e096      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_6:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 215));//key 1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	22d7      	movs	r2, #215	; 0xd7
 8002fb6:	00d2      	lsls	r2, r2, #3
 8002fb8:	4694      	mov	ip, r2
 8002fba:	4463      	add	r3, ip
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f7ff ffab 	bl	8002f18 <retrieveDataFromAddress>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	e08c      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_7:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 216));//key 1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	22d8      	movs	r2, #216	; 0xd8
 8002fca:	00d2      	lsls	r2, r2, #3
 8002fcc:	4694      	mov	ip, r2
 8002fce:	4463      	add	r3, ip
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7ff ffa1 	bl	8002f18 <retrieveDataFromAddress>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	e082      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_8:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 217));//key 1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	22d9      	movs	r2, #217	; 0xd9
 8002fde:	00d2      	lsls	r2, r2, #3
 8002fe0:	4694      	mov	ip, r2
 8002fe2:	4463      	add	r3, ip
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7ff ff97 	bl	8002f18 <retrieveDataFromAddress>
 8002fea:	0003      	movs	r3, r0
 8002fec:	e078      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_9:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 218));//key 1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	22da      	movs	r2, #218	; 0xda
 8002ff2:	00d2      	lsls	r2, r2, #3
 8002ff4:	4694      	mov	ip, r2
 8002ff6:	4463      	add	r3, ip
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7ff ff8d 	bl	8002f18 <retrieveDataFromAddress>
 8002ffe:	0003      	movs	r3, r0
 8003000:	e06e      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_10:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 219));//key 1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	22db      	movs	r2, #219	; 0xdb
 8003006:	00d2      	lsls	r2, r2, #3
 8003008:	4694      	mov	ip, r2
 800300a:	4463      	add	r3, ip
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff ff83 	bl	8002f18 <retrieveDataFromAddress>
 8003012:	0003      	movs	r3, r0
 8003014:	e064      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_11:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 220));//key 1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	22dc      	movs	r2, #220	; 0xdc
 800301a:	00d2      	lsls	r2, r2, #3
 800301c:	4694      	mov	ip, r2
 800301e:	4463      	add	r3, ip
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff ff79 	bl	8002f18 <retrieveDataFromAddress>
 8003026:	0003      	movs	r3, r0
 8003028:	e05a      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_12:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 221));//key 1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	22dd      	movs	r2, #221	; 0xdd
 800302e:	00d2      	lsls	r2, r2, #3
 8003030:	4694      	mov	ip, r2
 8003032:	4463      	add	r3, ip
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff ff6f 	bl	8002f18 <retrieveDataFromAddress>
 800303a:	0003      	movs	r3, r0
 800303c:	e050      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_13:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 222));//key 1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	22de      	movs	r2, #222	; 0xde
 8003042:	00d2      	lsls	r2, r2, #3
 8003044:	4694      	mov	ip, r2
 8003046:	4463      	add	r3, ip
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff ff65 	bl	8002f18 <retrieveDataFromAddress>
 800304e:	0003      	movs	r3, r0
 8003050:	e046      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;
case permiso_n_14:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 223));//key 1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	22df      	movs	r2, #223	; 0xdf
 8003056:	00d2      	lsls	r2, r2, #3
 8003058:	4694      	mov	ip, r2
 800305a:	4463      	add	r3, ip
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff ff5b 	bl	8002f18 <retrieveDataFromAddress>
 8003062:	0003      	movs	r3, r0
 8003064:	e03c      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_15:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 224));//key 1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	22e0      	movs	r2, #224	; 0xe0
 800306a:	00d2      	lsls	r2, r2, #3
 800306c:	4694      	mov	ip, r2
 800306e:	4463      	add	r3, ip
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff ff51 	bl	8002f18 <retrieveDataFromAddress>
 8003076:	0003      	movs	r3, r0
 8003078:	e032      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_16:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 225));//key 1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	22e1      	movs	r2, #225	; 0xe1
 800307e:	00d2      	lsls	r2, r2, #3
 8003080:	4694      	mov	ip, r2
 8003082:	4463      	add	r3, ip
 8003084:	0018      	movs	r0, r3
 8003086:	f7ff ff47 	bl	8002f18 <retrieveDataFromAddress>
 800308a:	0003      	movs	r3, r0
 800308c:	e028      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_17:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 226));//key 1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	22e2      	movs	r2, #226	; 0xe2
 8003092:	00d2      	lsls	r2, r2, #3
 8003094:	4694      	mov	ip, r2
 8003096:	4463      	add	r3, ip
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff ff3d 	bl	8002f18 <retrieveDataFromAddress>
 800309e:	0003      	movs	r3, r0
 80030a0:	e01e      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_18:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 227));//key 1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	22e3      	movs	r2, #227	; 0xe3
 80030a6:	00d2      	lsls	r2, r2, #3
 80030a8:	4694      	mov	ip, r2
 80030aa:	4463      	add	r3, ip
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7ff ff33 	bl	8002f18 <retrieveDataFromAddress>
 80030b2:	0003      	movs	r3, r0
 80030b4:	e014      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_19:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 228));//key 1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	22e4      	movs	r2, #228	; 0xe4
 80030ba:	00d2      	lsls	r2, r2, #3
 80030bc:	4694      	mov	ip, r2
 80030be:	4463      	add	r3, ip
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff ff29 	bl	8002f18 <retrieveDataFromAddress>
 80030c6:	0003      	movs	r3, r0
 80030c8:	e00a      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

case permiso_n_20:
	return retrieveDataFromAddress(hexPage + (DATA_SPACE * 229));//key 1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	22e5      	movs	r2, #229	; 0xe5
 80030ce:	00d2      	lsls	r2, r2, #3
 80030d0:	4694      	mov	ip, r2
 80030d2:	4463      	add	r3, ip
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff ff1f 	bl	8002f18 <retrieveDataFromAddress>
 80030da:	0003      	movs	r3, r0
 80030dc:	e000      	b.n	80030e0 <eeprom_read_key+0x1b4>
	break;

default:
	return 0;
 80030de:	2300      	movs	r3, #0


}


}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	08004970 	.word	0x08004970

080030ec <eeprom_read_tel_number>:



/*Funcion para ;leer los numeros de telefono*/
void eeprom_read_tel_number(uint32_t hexPage,uint16_t index,int buffer[])
{
 80030ec:	b590      	push	{r4, r7, lr}
 80030ee:	b091      	sub	sp, #68	; 0x44
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	200a      	movs	r0, #10
 80030f8:	183b      	adds	r3, r7, r0
 80030fa:	1c0a      	adds	r2, r1, #0
 80030fc:	801a      	strh	r2, [r3, #0]


uint16_t indexador=0;
 80030fe:	233e      	movs	r3, #62	; 0x3e
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	2200      	movs	r2, #0
 8003104:	801a      	strh	r2, [r3, #0]
switch(index)
 8003106:	183b      	adds	r3, r7, r0
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	2b15      	cmp	r3, #21
 800310c:	d901      	bls.n	8003112 <eeprom_read_tel_number+0x26>
 800310e:	f000 fbd2 	bl	80038b6 <eeprom_read_tel_number+0x7ca>
 8003112:	009a      	lsls	r2, r3, #2
 8003114:	4bcd      	ldr	r3, [pc, #820]	; (800344c <eeprom_read_tel_number+0x360>)
 8003116:	18d3      	adds	r3, r2, r3
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	469f      	mov	pc, r3
{
case tel_1:


	indexador=0;
 800311c:	233e      	movs	r3, #62	; 0x3e
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2200      	movs	r2, #0
 8003122:	801a      	strh	r2, [r3, #0]
		for(uint16_t conta=0; conta<=9; conta++)
 8003124:	233c      	movs	r3, #60	; 0x3c
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2200      	movs	r2, #0
 800312a:	801a      	strh	r2, [r3, #0]
 800312c:	e01c      	b.n	8003168 <eeprom_read_tel_number+0x7c>
			  {
				  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 800312e:	243c      	movs	r4, #60	; 0x3c
 8003130:	193b      	adds	r3, r7, r4
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	001a      	movs	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	18d3      	adds	r3, r2, r3
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff feeb 	bl	8002f18 <retrieveDataFromAddress>
 8003142:	0001      	movs	r1, r0
 8003144:	203e      	movs	r0, #62	; 0x3e
 8003146:	183b      	adds	r3, r7, r0
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	18d3      	adds	r3, r2, r3
 8003150:	000a      	movs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

				 	  indexador++;
 8003154:	183b      	adds	r3, r7, r0
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	183b      	adds	r3, r7, r0
 800315a:	3201      	adds	r2, #1
 800315c:	801a      	strh	r2, [r3, #0]
		for(uint16_t conta=0; conta<=9; conta++)
 800315e:	193b      	adds	r3, r7, r4
 8003160:	881a      	ldrh	r2, [r3, #0]
 8003162:	193b      	adds	r3, r7, r4
 8003164:	3201      	adds	r2, #1
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	233c      	movs	r3, #60	; 0x3c
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	2b09      	cmp	r3, #9
 8003170:	d9dd      	bls.n	800312e <eeprom_read_tel_number+0x42>
			  }


	break;
 8003172:	f000 fba0 	bl	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_2:


	indexador=0;
 8003176:	233e      	movs	r3, #62	; 0x3e
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	2200      	movs	r2, #0
 800317c:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=10; conta<=19; conta++)
 800317e:	233a      	movs	r3, #58	; 0x3a
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	220a      	movs	r2, #10
 8003184:	801a      	strh	r2, [r3, #0]
 8003186:	e01c      	b.n	80031c2 <eeprom_read_tel_number+0xd6>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003188:	243a      	movs	r4, #58	; 0x3a
 800318a:	193b      	adds	r3, r7, r4
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	001a      	movs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	18d3      	adds	r3, r2, r3
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff febe 	bl	8002f18 <retrieveDataFromAddress>
 800319c:	0001      	movs	r1, r0
 800319e:	203e      	movs	r0, #62	; 0x3e
 80031a0:	183b      	adds	r3, r7, r0
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	18d3      	adds	r3, r2, r3
 80031aa:	000a      	movs	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 80031ae:	183b      	adds	r3, r7, r0
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	183b      	adds	r3, r7, r0
 80031b4:	3201      	adds	r2, #1
 80031b6:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=10; conta<=19; conta++)
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	881a      	ldrh	r2, [r3, #0]
 80031bc:	193b      	adds	r3, r7, r4
 80031be:	3201      	adds	r2, #1
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	233a      	movs	r3, #58	; 0x3a
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	2b13      	cmp	r3, #19
 80031ca:	d9dd      	bls.n	8003188 <eeprom_read_tel_number+0x9c>
		  }
	break;
 80031cc:	f000 fb73 	bl	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_3:

	indexador=0;
 80031d0:	233e      	movs	r3, #62	; 0x3e
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	2200      	movs	r2, #0
 80031d6:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=20; conta<=29; conta++)
 80031d8:	2338      	movs	r3, #56	; 0x38
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2214      	movs	r2, #20
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	e01c      	b.n	800321c <eeprom_read_tel_number+0x130>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 80031e2:	2438      	movs	r4, #56	; 0x38
 80031e4:	193b      	adds	r3, r7, r4
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	001a      	movs	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7ff fe91 	bl	8002f18 <retrieveDataFromAddress>
 80031f6:	0001      	movs	r1, r0
 80031f8:	203e      	movs	r0, #62	; 0x3e
 80031fa:	183b      	adds	r3, r7, r0
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	18d3      	adds	r3, r2, r3
 8003204:	000a      	movs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003208:	183b      	adds	r3, r7, r0
 800320a:	881a      	ldrh	r2, [r3, #0]
 800320c:	183b      	adds	r3, r7, r0
 800320e:	3201      	adds	r2, #1
 8003210:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=20; conta<=29; conta++)
 8003212:	193b      	adds	r3, r7, r4
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	193b      	adds	r3, r7, r4
 8003218:	3201      	adds	r2, #1
 800321a:	801a      	strh	r2, [r3, #0]
 800321c:	2338      	movs	r3, #56	; 0x38
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	2b1d      	cmp	r3, #29
 8003224:	d9dd      	bls.n	80031e2 <eeprom_read_tel_number+0xf6>
		  }
	break;
 8003226:	e346      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_4:
	indexador=0;
 8003228:	233e      	movs	r3, #62	; 0x3e
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=30; conta<=39; conta++)
 8003230:	2336      	movs	r3, #54	; 0x36
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	221e      	movs	r2, #30
 8003236:	801a      	strh	r2, [r3, #0]
 8003238:	e01c      	b.n	8003274 <eeprom_read_tel_number+0x188>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 800323a:	2436      	movs	r4, #54	; 0x36
 800323c:	193b      	adds	r3, r7, r4
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	001a      	movs	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	18d3      	adds	r3, r2, r3
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff fe65 	bl	8002f18 <retrieveDataFromAddress>
 800324e:	0001      	movs	r1, r0
 8003250:	203e      	movs	r0, #62	; 0x3e
 8003252:	183b      	adds	r3, r7, r0
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	18d3      	adds	r3, r2, r3
 800325c:	000a      	movs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003260:	183b      	adds	r3, r7, r0
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	183b      	adds	r3, r7, r0
 8003266:	3201      	adds	r2, #1
 8003268:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=30; conta<=39; conta++)
 800326a:	193b      	adds	r3, r7, r4
 800326c:	881a      	ldrh	r2, [r3, #0]
 800326e:	193b      	adds	r3, r7, r4
 8003270:	3201      	adds	r2, #1
 8003272:	801a      	strh	r2, [r3, #0]
 8003274:	2336      	movs	r3, #54	; 0x36
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	2b27      	cmp	r3, #39	; 0x27
 800327c:	d9dd      	bls.n	800323a <eeprom_read_tel_number+0x14e>
		  }
	break;
 800327e:	e31a      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_5:
	indexador=0;
 8003280:	233e      	movs	r3, #62	; 0x3e
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	2200      	movs	r2, #0
 8003286:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=40; conta<=49; conta++)
 8003288:	2334      	movs	r3, #52	; 0x34
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2228      	movs	r2, #40	; 0x28
 800328e:	801a      	strh	r2, [r3, #0]
 8003290:	e01c      	b.n	80032cc <eeprom_read_tel_number+0x1e0>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003292:	2434      	movs	r4, #52	; 0x34
 8003294:	193b      	adds	r3, r7, r4
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	001a      	movs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	18d3      	adds	r3, r2, r3
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff fe39 	bl	8002f18 <retrieveDataFromAddress>
 80032a6:	0001      	movs	r1, r0
 80032a8:	203e      	movs	r0, #62	; 0x3e
 80032aa:	183b      	adds	r3, r7, r0
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	18d3      	adds	r3, r2, r3
 80032b4:	000a      	movs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 80032b8:	183b      	adds	r3, r7, r0
 80032ba:	881a      	ldrh	r2, [r3, #0]
 80032bc:	183b      	adds	r3, r7, r0
 80032be:	3201      	adds	r2, #1
 80032c0:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=40; conta<=49; conta++)
 80032c2:	193b      	adds	r3, r7, r4
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	193b      	adds	r3, r7, r4
 80032c8:	3201      	adds	r2, #1
 80032ca:	801a      	strh	r2, [r3, #0]
 80032cc:	2334      	movs	r3, #52	; 0x34
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	2b31      	cmp	r3, #49	; 0x31
 80032d4:	d9dd      	bls.n	8003292 <eeprom_read_tel_number+0x1a6>
		  }
	break;
 80032d6:	e2ee      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_6:
	indexador=0;
 80032d8:	233e      	movs	r3, #62	; 0x3e
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=50; conta<=59; conta++)
 80032e0:	2332      	movs	r3, #50	; 0x32
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2232      	movs	r2, #50	; 0x32
 80032e6:	801a      	strh	r2, [r3, #0]
 80032e8:	e01c      	b.n	8003324 <eeprom_read_tel_number+0x238>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 80032ea:	2432      	movs	r4, #50	; 0x32
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	001a      	movs	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	18d3      	adds	r3, r2, r3
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff fe0d 	bl	8002f18 <retrieveDataFromAddress>
 80032fe:	0001      	movs	r1, r0
 8003300:	203e      	movs	r0, #62	; 0x3e
 8003302:	183b      	adds	r3, r7, r0
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	18d3      	adds	r3, r2, r3
 800330c:	000a      	movs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003310:	183b      	adds	r3, r7, r0
 8003312:	881a      	ldrh	r2, [r3, #0]
 8003314:	183b      	adds	r3, r7, r0
 8003316:	3201      	adds	r2, #1
 8003318:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=50; conta<=59; conta++)
 800331a:	193b      	adds	r3, r7, r4
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	193b      	adds	r3, r7, r4
 8003320:	3201      	adds	r2, #1
 8003322:	801a      	strh	r2, [r3, #0]
 8003324:	2332      	movs	r3, #50	; 0x32
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	2b3b      	cmp	r3, #59	; 0x3b
 800332c:	d9dd      	bls.n	80032ea <eeprom_read_tel_number+0x1fe>
		  }
	break;
 800332e:	e2c2      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_7:
	indexador=0;
 8003330:	233e      	movs	r3, #62	; 0x3e
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2200      	movs	r2, #0
 8003336:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=60; conta<=69; conta++)
 8003338:	2330      	movs	r3, #48	; 0x30
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	223c      	movs	r2, #60	; 0x3c
 800333e:	801a      	strh	r2, [r3, #0]
 8003340:	e01c      	b.n	800337c <eeprom_read_tel_number+0x290>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003342:	2430      	movs	r4, #48	; 0x30
 8003344:	193b      	adds	r3, r7, r4
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	001a      	movs	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	18d3      	adds	r3, r2, r3
 8003350:	0018      	movs	r0, r3
 8003352:	f7ff fde1 	bl	8002f18 <retrieveDataFromAddress>
 8003356:	0001      	movs	r1, r0
 8003358:	203e      	movs	r0, #62	; 0x3e
 800335a:	183b      	adds	r3, r7, r0
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	18d3      	adds	r3, r2, r3
 8003364:	000a      	movs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003368:	183b      	adds	r3, r7, r0
 800336a:	881a      	ldrh	r2, [r3, #0]
 800336c:	183b      	adds	r3, r7, r0
 800336e:	3201      	adds	r2, #1
 8003370:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=60; conta<=69; conta++)
 8003372:	193b      	adds	r3, r7, r4
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	193b      	adds	r3, r7, r4
 8003378:	3201      	adds	r2, #1
 800337a:	801a      	strh	r2, [r3, #0]
 800337c:	2330      	movs	r3, #48	; 0x30
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	2b45      	cmp	r3, #69	; 0x45
 8003384:	d9dd      	bls.n	8003342 <eeprom_read_tel_number+0x256>
		  }
	break;
 8003386:	e296      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_8:
	indexador=0;
 8003388:	233e      	movs	r3, #62	; 0x3e
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2200      	movs	r2, #0
 800338e:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=70; conta<=79; conta++)
 8003390:	232e      	movs	r3, #46	; 0x2e
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2246      	movs	r2, #70	; 0x46
 8003396:	801a      	strh	r2, [r3, #0]
 8003398:	e01c      	b.n	80033d4 <eeprom_read_tel_number+0x2e8>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 800339a:	242e      	movs	r4, #46	; 0x2e
 800339c:	193b      	adds	r3, r7, r4
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	001a      	movs	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	18d3      	adds	r3, r2, r3
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff fdb5 	bl	8002f18 <retrieveDataFromAddress>
 80033ae:	0001      	movs	r1, r0
 80033b0:	203e      	movs	r0, #62	; 0x3e
 80033b2:	183b      	adds	r3, r7, r0
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	18d3      	adds	r3, r2, r3
 80033bc:	000a      	movs	r2, r1
 80033be:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 80033c0:	183b      	adds	r3, r7, r0
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	183b      	adds	r3, r7, r0
 80033c6:	3201      	adds	r2, #1
 80033c8:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=70; conta<=79; conta++)
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	881a      	ldrh	r2, [r3, #0]
 80033ce:	193b      	adds	r3, r7, r4
 80033d0:	3201      	adds	r2, #1
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	232e      	movs	r3, #46	; 0x2e
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	2b4f      	cmp	r3, #79	; 0x4f
 80033dc:	d9dd      	bls.n	800339a <eeprom_read_tel_number+0x2ae>
		  }
	break;
 80033de:	e26a      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_9:
	indexador=0;
 80033e0:	233e      	movs	r3, #62	; 0x3e
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	2200      	movs	r2, #0
 80033e6:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=80; conta<=89; conta++)
 80033e8:	232c      	movs	r3, #44	; 0x2c
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	2250      	movs	r2, #80	; 0x50
 80033ee:	801a      	strh	r2, [r3, #0]
 80033f0:	e01c      	b.n	800342c <eeprom_read_tel_number+0x340>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 80033f2:	242c      	movs	r4, #44	; 0x2c
 80033f4:	193b      	adds	r3, r7, r4
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	001a      	movs	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	18d3      	adds	r3, r2, r3
 8003400:	0018      	movs	r0, r3
 8003402:	f7ff fd89 	bl	8002f18 <retrieveDataFromAddress>
 8003406:	0001      	movs	r1, r0
 8003408:	203e      	movs	r0, #62	; 0x3e
 800340a:	183b      	adds	r3, r7, r0
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	18d3      	adds	r3, r2, r3
 8003414:	000a      	movs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003418:	183b      	adds	r3, r7, r0
 800341a:	881a      	ldrh	r2, [r3, #0]
 800341c:	183b      	adds	r3, r7, r0
 800341e:	3201      	adds	r2, #1
 8003420:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=80; conta<=89; conta++)
 8003422:	193b      	adds	r3, r7, r4
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	193b      	adds	r3, r7, r4
 8003428:	3201      	adds	r2, #1
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	232c      	movs	r3, #44	; 0x2c
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	2b59      	cmp	r3, #89	; 0x59
 8003434:	d9dd      	bls.n	80033f2 <eeprom_read_tel_number+0x306>
		  }
	break;
 8003436:	e23e      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_10:
	indexador=0;
 8003438:	233e      	movs	r3, #62	; 0x3e
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	2200      	movs	r2, #0
 800343e:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=90; conta<=99; conta++)
 8003440:	232a      	movs	r3, #42	; 0x2a
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	225a      	movs	r2, #90	; 0x5a
 8003446:	801a      	strh	r2, [r3, #0]
 8003448:	e01f      	b.n	800348a <eeprom_read_tel_number+0x39e>
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	080049c0 	.word	0x080049c0
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003450:	242a      	movs	r4, #42	; 0x2a
 8003452:	193b      	adds	r3, r7, r4
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	001a      	movs	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	18d3      	adds	r3, r2, r3
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff fd5a 	bl	8002f18 <retrieveDataFromAddress>
 8003464:	0001      	movs	r1, r0
 8003466:	203e      	movs	r0, #62	; 0x3e
 8003468:	183b      	adds	r3, r7, r0
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	18d3      	adds	r3, r2, r3
 8003472:	000a      	movs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003476:	183b      	adds	r3, r7, r0
 8003478:	881a      	ldrh	r2, [r3, #0]
 800347a:	183b      	adds	r3, r7, r0
 800347c:	3201      	adds	r2, #1
 800347e:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=90; conta<=99; conta++)
 8003480:	193b      	adds	r3, r7, r4
 8003482:	881a      	ldrh	r2, [r3, #0]
 8003484:	193b      	adds	r3, r7, r4
 8003486:	3201      	adds	r2, #1
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	232a      	movs	r3, #42	; 0x2a
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	2b63      	cmp	r3, #99	; 0x63
 8003492:	d9dd      	bls.n	8003450 <eeprom_read_tel_number+0x364>
		  }
	break;
 8003494:	e20f      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_11:
	indexador=0;
 8003496:	233e      	movs	r3, #62	; 0x3e
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	2200      	movs	r2, #0
 800349c:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=100; conta<=109; conta++)
 800349e:	2328      	movs	r3, #40	; 0x28
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2264      	movs	r2, #100	; 0x64
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	e01c      	b.n	80034e2 <eeprom_read_tel_number+0x3f6>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 80034a8:	2428      	movs	r4, #40	; 0x28
 80034aa:	193b      	adds	r3, r7, r4
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	001a      	movs	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	18d3      	adds	r3, r2, r3
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7ff fd2e 	bl	8002f18 <retrieveDataFromAddress>
 80034bc:	0001      	movs	r1, r0
 80034be:	203e      	movs	r0, #62	; 0x3e
 80034c0:	183b      	adds	r3, r7, r0
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	18d3      	adds	r3, r2, r3
 80034ca:	000a      	movs	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 80034ce:	183b      	adds	r3, r7, r0
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	183b      	adds	r3, r7, r0
 80034d4:	3201      	adds	r2, #1
 80034d6:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=100; conta<=109; conta++)
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	881a      	ldrh	r2, [r3, #0]
 80034dc:	193b      	adds	r3, r7, r4
 80034de:	3201      	adds	r2, #1
 80034e0:	801a      	strh	r2, [r3, #0]
 80034e2:	2328      	movs	r3, #40	; 0x28
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	2b6d      	cmp	r3, #109	; 0x6d
 80034ea:	d9dd      	bls.n	80034a8 <eeprom_read_tel_number+0x3bc>
		  }
	break;
 80034ec:	e1e3      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_12:
	indexador=0;
 80034ee:	233e      	movs	r3, #62	; 0x3e
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2200      	movs	r2, #0
 80034f4:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=110; conta<=119; conta++)
 80034f6:	2326      	movs	r3, #38	; 0x26
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	226e      	movs	r2, #110	; 0x6e
 80034fc:	801a      	strh	r2, [r3, #0]
 80034fe:	e01c      	b.n	800353a <eeprom_read_tel_number+0x44e>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003500:	2426      	movs	r4, #38	; 0x26
 8003502:	193b      	adds	r3, r7, r4
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	001a      	movs	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	18d3      	adds	r3, r2, r3
 800350e:	0018      	movs	r0, r3
 8003510:	f7ff fd02 	bl	8002f18 <retrieveDataFromAddress>
 8003514:	0001      	movs	r1, r0
 8003516:	203e      	movs	r0, #62	; 0x3e
 8003518:	183b      	adds	r3, r7, r0
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	18d3      	adds	r3, r2, r3
 8003522:	000a      	movs	r2, r1
 8003524:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003526:	183b      	adds	r3, r7, r0
 8003528:	881a      	ldrh	r2, [r3, #0]
 800352a:	183b      	adds	r3, r7, r0
 800352c:	3201      	adds	r2, #1
 800352e:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=110; conta<=119; conta++)
 8003530:	193b      	adds	r3, r7, r4
 8003532:	881a      	ldrh	r2, [r3, #0]
 8003534:	193b      	adds	r3, r7, r4
 8003536:	3201      	adds	r2, #1
 8003538:	801a      	strh	r2, [r3, #0]
 800353a:	2326      	movs	r3, #38	; 0x26
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	2b77      	cmp	r3, #119	; 0x77
 8003542:	d9dd      	bls.n	8003500 <eeprom_read_tel_number+0x414>
		  }
	break;
 8003544:	e1b7      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_13:
	indexador=0;
 8003546:	233e      	movs	r3, #62	; 0x3e
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	2200      	movs	r2, #0
 800354c:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=120; conta<=129; conta++)
 800354e:	2324      	movs	r3, #36	; 0x24
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	2278      	movs	r2, #120	; 0x78
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	e01c      	b.n	8003592 <eeprom_read_tel_number+0x4a6>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003558:	2424      	movs	r4, #36	; 0x24
 800355a:	193b      	adds	r3, r7, r4
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	001a      	movs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	18d3      	adds	r3, r2, r3
 8003566:	0018      	movs	r0, r3
 8003568:	f7ff fcd6 	bl	8002f18 <retrieveDataFromAddress>
 800356c:	0001      	movs	r1, r0
 800356e:	203e      	movs	r0, #62	; 0x3e
 8003570:	183b      	adds	r3, r7, r0
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	18d3      	adds	r3, r2, r3
 800357a:	000a      	movs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 800357e:	183b      	adds	r3, r7, r0
 8003580:	881a      	ldrh	r2, [r3, #0]
 8003582:	183b      	adds	r3, r7, r0
 8003584:	3201      	adds	r2, #1
 8003586:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=120; conta<=129; conta++)
 8003588:	193b      	adds	r3, r7, r4
 800358a:	881a      	ldrh	r2, [r3, #0]
 800358c:	193b      	adds	r3, r7, r4
 800358e:	3201      	adds	r2, #1
 8003590:	801a      	strh	r2, [r3, #0]
 8003592:	2324      	movs	r3, #36	; 0x24
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	2b81      	cmp	r3, #129	; 0x81
 800359a:	d9dd      	bls.n	8003558 <eeprom_read_tel_number+0x46c>
		  }
	break;
 800359c:	e18b      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_14:
	indexador=0;
 800359e:	233e      	movs	r3, #62	; 0x3e
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	2200      	movs	r2, #0
 80035a4:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=130; conta<=139; conta++)
 80035a6:	2322      	movs	r3, #34	; 0x22
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	2282      	movs	r2, #130	; 0x82
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	e01c      	b.n	80035ea <eeprom_read_tel_number+0x4fe>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 80035b0:	2422      	movs	r4, #34	; 0x22
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	001a      	movs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	18d3      	adds	r3, r2, r3
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff fcaa 	bl	8002f18 <retrieveDataFromAddress>
 80035c4:	0001      	movs	r1, r0
 80035c6:	203e      	movs	r0, #62	; 0x3e
 80035c8:	183b      	adds	r3, r7, r0
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	18d3      	adds	r3, r2, r3
 80035d2:	000a      	movs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 80035d6:	183b      	adds	r3, r7, r0
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	183b      	adds	r3, r7, r0
 80035dc:	3201      	adds	r2, #1
 80035de:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=130; conta<=139; conta++)
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	881a      	ldrh	r2, [r3, #0]
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	3201      	adds	r2, #1
 80035e8:	801a      	strh	r2, [r3, #0]
 80035ea:	2322      	movs	r3, #34	; 0x22
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	2b8b      	cmp	r3, #139	; 0x8b
 80035f2:	d9dd      	bls.n	80035b0 <eeprom_read_tel_number+0x4c4>
		  }
	break;
 80035f4:	e15f      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_15:
	indexador=0;
 80035f6:	233e      	movs	r3, #62	; 0x3e
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2200      	movs	r2, #0
 80035fc:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=140; conta<=149; conta++)
 80035fe:	2320      	movs	r3, #32
 8003600:	18fb      	adds	r3, r7, r3
 8003602:	228c      	movs	r2, #140	; 0x8c
 8003604:	801a      	strh	r2, [r3, #0]
 8003606:	e01c      	b.n	8003642 <eeprom_read_tel_number+0x556>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003608:	2420      	movs	r4, #32
 800360a:	193b      	adds	r3, r7, r4
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	001a      	movs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	18d3      	adds	r3, r2, r3
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff fc7e 	bl	8002f18 <retrieveDataFromAddress>
 800361c:	0001      	movs	r1, r0
 800361e:	203e      	movs	r0, #62	; 0x3e
 8003620:	183b      	adds	r3, r7, r0
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	18d3      	adds	r3, r2, r3
 800362a:	000a      	movs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 800362e:	183b      	adds	r3, r7, r0
 8003630:	881a      	ldrh	r2, [r3, #0]
 8003632:	183b      	adds	r3, r7, r0
 8003634:	3201      	adds	r2, #1
 8003636:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=140; conta<=149; conta++)
 8003638:	193b      	adds	r3, r7, r4
 800363a:	881a      	ldrh	r2, [r3, #0]
 800363c:	193b      	adds	r3, r7, r4
 800363e:	3201      	adds	r2, #1
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	2320      	movs	r3, #32
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	2b95      	cmp	r3, #149	; 0x95
 800364a:	d9dd      	bls.n	8003608 <eeprom_read_tel_number+0x51c>
		  }
	break;
 800364c:	e133      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_16:
	indexador=0;
 800364e:	233e      	movs	r3, #62	; 0x3e
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	2200      	movs	r2, #0
 8003654:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=150; conta<=159; conta++)
 8003656:	231e      	movs	r3, #30
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	2296      	movs	r2, #150	; 0x96
 800365c:	801a      	strh	r2, [r3, #0]
 800365e:	e01c      	b.n	800369a <eeprom_read_tel_number+0x5ae>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003660:	241e      	movs	r4, #30
 8003662:	193b      	adds	r3, r7, r4
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	001a      	movs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f7ff fc52 	bl	8002f18 <retrieveDataFromAddress>
 8003674:	0001      	movs	r1, r0
 8003676:	203e      	movs	r0, #62	; 0x3e
 8003678:	183b      	adds	r3, r7, r0
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	000a      	movs	r2, r1
 8003684:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003686:	183b      	adds	r3, r7, r0
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	183b      	adds	r3, r7, r0
 800368c:	3201      	adds	r2, #1
 800368e:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=150; conta<=159; conta++)
 8003690:	193b      	adds	r3, r7, r4
 8003692:	881a      	ldrh	r2, [r3, #0]
 8003694:	193b      	adds	r3, r7, r4
 8003696:	3201      	adds	r2, #1
 8003698:	801a      	strh	r2, [r3, #0]
 800369a:	231e      	movs	r3, #30
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	2b9f      	cmp	r3, #159	; 0x9f
 80036a2:	d9dd      	bls.n	8003660 <eeprom_read_tel_number+0x574>
		  }
	break;
 80036a4:	e107      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_17:
	indexador=0;
 80036a6:	233e      	movs	r3, #62	; 0x3e
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	2200      	movs	r2, #0
 80036ac:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=160; conta<=169; conta++)
 80036ae:	231c      	movs	r3, #28
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	22a0      	movs	r2, #160	; 0xa0
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	e01c      	b.n	80036f2 <eeprom_read_tel_number+0x606>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 80036b8:	241c      	movs	r4, #28
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	001a      	movs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	18d3      	adds	r3, r2, r3
 80036c6:	0018      	movs	r0, r3
 80036c8:	f7ff fc26 	bl	8002f18 <retrieveDataFromAddress>
 80036cc:	0001      	movs	r1, r0
 80036ce:	203e      	movs	r0, #62	; 0x3e
 80036d0:	183b      	adds	r3, r7, r0
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	18d3      	adds	r3, r2, r3
 80036da:	000a      	movs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 80036de:	183b      	adds	r3, r7, r0
 80036e0:	881a      	ldrh	r2, [r3, #0]
 80036e2:	183b      	adds	r3, r7, r0
 80036e4:	3201      	adds	r2, #1
 80036e6:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=160; conta<=169; conta++)
 80036e8:	193b      	adds	r3, r7, r4
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	3201      	adds	r2, #1
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	231c      	movs	r3, #28
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	2ba9      	cmp	r3, #169	; 0xa9
 80036fa:	d9dd      	bls.n	80036b8 <eeprom_read_tel_number+0x5cc>
		  }
	break;
 80036fc:	e0db      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_18:
	indexador=0;
 80036fe:	233e      	movs	r3, #62	; 0x3e
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2200      	movs	r2, #0
 8003704:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=170; conta<=179; conta++)
 8003706:	231a      	movs	r3, #26
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	22aa      	movs	r2, #170	; 0xaa
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e01c      	b.n	800374a <eeprom_read_tel_number+0x65e>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003710:	241a      	movs	r4, #26
 8003712:	193b      	adds	r3, r7, r4
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	001a      	movs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	18d3      	adds	r3, r2, r3
 800371e:	0018      	movs	r0, r3
 8003720:	f7ff fbfa 	bl	8002f18 <retrieveDataFromAddress>
 8003724:	0001      	movs	r1, r0
 8003726:	203e      	movs	r0, #62	; 0x3e
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	18d3      	adds	r3, r2, r3
 8003732:	000a      	movs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003736:	183b      	adds	r3, r7, r0
 8003738:	881a      	ldrh	r2, [r3, #0]
 800373a:	183b      	adds	r3, r7, r0
 800373c:	3201      	adds	r2, #1
 800373e:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=170; conta<=179; conta++)
 8003740:	193b      	adds	r3, r7, r4
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	193b      	adds	r3, r7, r4
 8003746:	3201      	adds	r2, #1
 8003748:	801a      	strh	r2, [r3, #0]
 800374a:	231a      	movs	r3, #26
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	2bb3      	cmp	r3, #179	; 0xb3
 8003752:	d9dd      	bls.n	8003710 <eeprom_read_tel_number+0x624>
		  }
	break;
 8003754:	e0af      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_19:
	indexador=0;
 8003756:	233e      	movs	r3, #62	; 0x3e
 8003758:	18fb      	adds	r3, r7, r3
 800375a:	2200      	movs	r2, #0
 800375c:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=180; conta<=189; conta++)
 800375e:	2318      	movs	r3, #24
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	22b4      	movs	r2, #180	; 0xb4
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	e01c      	b.n	80037a2 <eeprom_read_tel_number+0x6b6>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003768:	2418      	movs	r4, #24
 800376a:	193b      	adds	r3, r7, r4
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	001a      	movs	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	18d3      	adds	r3, r2, r3
 8003776:	0018      	movs	r0, r3
 8003778:	f7ff fbce 	bl	8002f18 <retrieveDataFromAddress>
 800377c:	0001      	movs	r1, r0
 800377e:	203e      	movs	r0, #62	; 0x3e
 8003780:	183b      	adds	r3, r7, r0
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	18d3      	adds	r3, r2, r3
 800378a:	000a      	movs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 800378e:	183b      	adds	r3, r7, r0
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	183b      	adds	r3, r7, r0
 8003794:	3201      	adds	r2, #1
 8003796:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=180; conta<=189; conta++)
 8003798:	193b      	adds	r3, r7, r4
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	193b      	adds	r3, r7, r4
 800379e:	3201      	adds	r2, #1
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	2318      	movs	r3, #24
 80037a4:	18fb      	adds	r3, r7, r3
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	2bbd      	cmp	r3, #189	; 0xbd
 80037aa:	d9dd      	bls.n	8003768 <eeprom_read_tel_number+0x67c>
		  }
	break;
 80037ac:	e083      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case tel_20:
	indexador=0;
 80037ae:	233e      	movs	r3, #62	; 0x3e
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	2200      	movs	r2, #0
 80037b4:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=190; conta<=199; conta++)
 80037b6:	2316      	movs	r3, #22
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	22be      	movs	r2, #190	; 0xbe
 80037bc:	801a      	strh	r2, [r3, #0]
 80037be:	e01c      	b.n	80037fa <eeprom_read_tel_number+0x70e>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 80037c0:	2416      	movs	r4, #22
 80037c2:	193b      	adds	r3, r7, r4
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	001a      	movs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	18d3      	adds	r3, r2, r3
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7ff fba2 	bl	8002f18 <retrieveDataFromAddress>
 80037d4:	0001      	movs	r1, r0
 80037d6:	203e      	movs	r0, #62	; 0x3e
 80037d8:	183b      	adds	r3, r7, r0
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	18d3      	adds	r3, r2, r3
 80037e2:	000a      	movs	r2, r1
 80037e4:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	881a      	ldrh	r2, [r3, #0]
 80037ea:	183b      	adds	r3, r7, r0
 80037ec:	3201      	adds	r2, #1
 80037ee:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=190; conta<=199; conta++)
 80037f0:	193b      	adds	r3, r7, r4
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	193b      	adds	r3, r7, r4
 80037f6:	3201      	adds	r2, #1
 80037f8:	801a      	strh	r2, [r3, #0]
 80037fa:	2316      	movs	r3, #22
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	2bc7      	cmp	r3, #199	; 0xc7
 8003802:	d9dd      	bls.n	80037c0 <eeprom_read_tel_number+0x6d4>
		  }
	break;
 8003804:	e057      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>
case pass://pasword
	indexador=0;
 8003806:	233e      	movs	r3, #62	; 0x3e
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2200      	movs	r2, #0
 800380c:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=200; conta<=204; conta++)
 800380e:	2314      	movs	r3, #20
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	22c8      	movs	r2, #200	; 0xc8
 8003814:	801a      	strh	r2, [r3, #0]
 8003816:	e01c      	b.n	8003852 <eeprom_read_tel_number+0x766>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003818:	2414      	movs	r4, #20
 800381a:	193b      	adds	r3, r7, r4
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	001a      	movs	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	18d3      	adds	r3, r2, r3
 8003826:	0018      	movs	r0, r3
 8003828:	f7ff fb76 	bl	8002f18 <retrieveDataFromAddress>
 800382c:	0001      	movs	r1, r0
 800382e:	203e      	movs	r0, #62	; 0x3e
 8003830:	183b      	adds	r3, r7, r0
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	18d3      	adds	r3, r2, r3
 800383a:	000a      	movs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 800383e:	183b      	adds	r3, r7, r0
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	183b      	adds	r3, r7, r0
 8003844:	3201      	adds	r2, #1
 8003846:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=200; conta<=204; conta++)
 8003848:	193b      	adds	r3, r7, r4
 800384a:	881a      	ldrh	r2, [r3, #0]
 800384c:	193b      	adds	r3, r7, r4
 800384e:	3201      	adds	r2, #1
 8003850:	801a      	strh	r2, [r3, #0]
 8003852:	2314      	movs	r3, #20
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	2bcc      	cmp	r3, #204	; 0xcc
 800385a:	d9dd      	bls.n	8003818 <eeprom_read_tel_number+0x72c>
		  }
	break;
 800385c:	e02b      	b.n	80038b6 <eeprom_read_tel_number+0x7ca>

case mpass: //master password
	indexador=0;
 800385e:	233e      	movs	r3, #62	; 0x3e
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2200      	movs	r2, #0
 8003864:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=205; conta<=209; conta++)
 8003866:	2312      	movs	r3, #18
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	22cd      	movs	r2, #205	; 0xcd
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	e01c      	b.n	80038aa <eeprom_read_tel_number+0x7be>
		  {
			  buffer[indexador] = retrieveDataFromAddress(hexPage + (DATA_SPACE * conta));
 8003870:	2412      	movs	r4, #18
 8003872:	193b      	adds	r3, r7, r4
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	001a      	movs	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	18d3      	adds	r3, r2, r3
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff fb4a 	bl	8002f18 <retrieveDataFromAddress>
 8003884:	0001      	movs	r1, r0
 8003886:	203e      	movs	r0, #62	; 0x3e
 8003888:	183b      	adds	r3, r7, r0
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	000a      	movs	r2, r1
 8003894:	601a      	str	r2, [r3, #0]

			 	  indexador++;
 8003896:	183b      	adds	r3, r7, r0
 8003898:	881a      	ldrh	r2, [r3, #0]
 800389a:	183b      	adds	r3, r7, r0
 800389c:	3201      	adds	r2, #1
 800389e:	801a      	strh	r2, [r3, #0]
	for(uint16_t conta=205; conta<=209; conta++)
 80038a0:	193b      	adds	r3, r7, r4
 80038a2:	881a      	ldrh	r2, [r3, #0]
 80038a4:	193b      	adds	r3, r7, r4
 80038a6:	3201      	adds	r2, #1
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	2312      	movs	r3, #18
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	2bd1      	cmp	r3, #209	; 0xd1
 80038b2:	d9dd      	bls.n	8003870 <eeprom_read_tel_number+0x784>
		  }
	break;
 80038b4:	46c0      	nop			; (mov r8, r8)
}




}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b011      	add	sp, #68	; 0x44
 80038bc:	bd90      	pop	{r4, r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)

080038c0 <imprimir_vector>:


/*Esta fucnion la podemos borrar si queremos */

void imprimir_vector(int vector[], int vector_number)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
		vector_number=vector_number-1;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	603b      	str	r3, [r7, #0]

	  for(uint8_t c =0; c<=vector_number;c++)
 80038d0:	230f      	movs	r3, #15
 80038d2:	18fb      	adds	r3, r7, r3
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	e011      	b.n	80038fe <imprimir_vector+0x3e>
	  {
		  SerialUartSendVarInt("%d", vector[c]);
 80038da:	240f      	movs	r4, #15
 80038dc:	193b      	adds	r3, r7, r4
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	001a      	movs	r2, r3
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <imprimir_vector+0x54>)
 80038ec:	0011      	movs	r1, r2
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 f82a 	bl	8003948 <SerialUartSendVarInt>
	  for(uint8_t c =0; c<=vector_number;c++)
 80038f4:	193b      	adds	r3, r7, r4
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	193b      	adds	r3, r7, r4
 80038fa:	3201      	adds	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	230f      	movs	r3, #15
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	dae7      	bge.n	80038da <imprimir_vector+0x1a>

	  }

}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	46c0      	nop			; (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b005      	add	sp, #20
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	080048e4 	.word	0x080048e4

08003918 <SerialUartSendString>:




void SerialUartSendString(char *ptr)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
uint32_t DataLen = strlen(ptr);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	0018      	movs	r0, r3
 8003924:	f7fc fbec 	bl	8000100 <strlen>
 8003928:	0003      	movs	r3, r0
 800392a:	60fb      	str	r3, [r7, #12]
HAL_UART_Transmit(&huart1, (const uint8_t *)ptr, DataLen, HAL_MAX_DELAY);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	b29a      	uxth	r2, r3
 8003930:	2301      	movs	r3, #1
 8003932:	425b      	negs	r3, r3
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4803      	ldr	r0, [pc, #12]	; (8003944 <SerialUartSendString+0x2c>)
 8003938:	f7fe fdf2 	bl	8002520 <HAL_UART_Transmit>
}
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}
 8003944:	2000008c 	.word	0x2000008c

08003948 <SerialUartSendVarInt>:

void SerialUartSendVarInt(char *Text,uint32_t var)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b091      	sub	sp, #68	; 0x44
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
	char Buffer[50];
	sprintf(Buffer, Text,var);
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	240c      	movs	r4, #12
 8003958:	193b      	adds	r3, r7, r4
 800395a:	0018      	movs	r0, r3
 800395c:	f000 f83a 	bl	80039d4 <siprintf>
	SerialUartSendString(Buffer);
 8003960:	193b      	adds	r3, r7, r4
 8003962:	0018      	movs	r0, r3
 8003964:	f7ff ffd8 	bl	8003918 <SerialUartSendString>
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b011      	add	sp, #68	; 0x44
 800396e:	bd90      	pop	{r4, r7, pc}

08003970 <__errno>:
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <__errno+0x8>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4770      	bx	lr
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	2000000c 	.word	0x2000000c

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	2600      	movs	r6, #0
 8003980:	4d0c      	ldr	r5, [pc, #48]	; (80039b4 <__libc_init_array+0x38>)
 8003982:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003984:	1b64      	subs	r4, r4, r5
 8003986:	10a4      	asrs	r4, r4, #2
 8003988:	42a6      	cmp	r6, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	2600      	movs	r6, #0
 800398e:	f000 fc8b 	bl	80042a8 <_init>
 8003992:	4d0a      	ldr	r5, [pc, #40]	; (80039bc <__libc_init_array+0x40>)
 8003994:	4c0a      	ldr	r4, [pc, #40]	; (80039c0 <__libc_init_array+0x44>)
 8003996:	1b64      	subs	r4, r4, r5
 8003998:	10a4      	asrs	r4, r4, #2
 800399a:	42a6      	cmp	r6, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	00b3      	lsls	r3, r6, #2
 80039a2:	58eb      	ldr	r3, [r5, r3]
 80039a4:	4798      	blx	r3
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	00b3      	lsls	r3, r6, #2
 80039ac:	58eb      	ldr	r3, [r5, r3]
 80039ae:	4798      	blx	r3
 80039b0:	3601      	adds	r6, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08004aac 	.word	0x08004aac
 80039b8:	08004aac 	.word	0x08004aac
 80039bc:	08004aac 	.word	0x08004aac
 80039c0:	08004ab0 	.word	0x08004ab0

080039c4 <memset>:
 80039c4:	0003      	movs	r3, r0
 80039c6:	1882      	adds	r2, r0, r2
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d100      	bne.n	80039ce <memset+0xa>
 80039cc:	4770      	bx	lr
 80039ce:	7019      	strb	r1, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	e7f9      	b.n	80039c8 <memset+0x4>

080039d4 <siprintf>:
 80039d4:	b40e      	push	{r1, r2, r3}
 80039d6:	b500      	push	{lr}
 80039d8:	490b      	ldr	r1, [pc, #44]	; (8003a08 <siprintf+0x34>)
 80039da:	b09c      	sub	sp, #112	; 0x70
 80039dc:	ab1d      	add	r3, sp, #116	; 0x74
 80039de:	9002      	str	r0, [sp, #8]
 80039e0:	9006      	str	r0, [sp, #24]
 80039e2:	9107      	str	r1, [sp, #28]
 80039e4:	9104      	str	r1, [sp, #16]
 80039e6:	4809      	ldr	r0, [pc, #36]	; (8003a0c <siprintf+0x38>)
 80039e8:	4909      	ldr	r1, [pc, #36]	; (8003a10 <siprintf+0x3c>)
 80039ea:	cb04      	ldmia	r3!, {r2}
 80039ec:	9105      	str	r1, [sp, #20]
 80039ee:	6800      	ldr	r0, [r0, #0]
 80039f0:	a902      	add	r1, sp, #8
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	f000 f90a 	bl	8003c0c <_svfiprintf_r>
 80039f8:	2300      	movs	r3, #0
 80039fa:	9a02      	ldr	r2, [sp, #8]
 80039fc:	7013      	strb	r3, [r2, #0]
 80039fe:	b01c      	add	sp, #112	; 0x70
 8003a00:	bc08      	pop	{r3}
 8003a02:	b003      	add	sp, #12
 8003a04:	4718      	bx	r3
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	7fffffff 	.word	0x7fffffff
 8003a0c:	2000000c 	.word	0x2000000c
 8003a10:	ffff0208 	.word	0xffff0208

08003a14 <__retarget_lock_acquire_recursive>:
 8003a14:	4770      	bx	lr

08003a16 <__retarget_lock_release_recursive>:
 8003a16:	4770      	bx	lr

08003a18 <sbrk_aligned>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4e0f      	ldr	r6, [pc, #60]	; (8003a58 <sbrk_aligned+0x40>)
 8003a1c:	000d      	movs	r5, r1
 8003a1e:	6831      	ldr	r1, [r6, #0]
 8003a20:	0004      	movs	r4, r0
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d102      	bne.n	8003a2c <sbrk_aligned+0x14>
 8003a26:	f000 fb73 	bl	8004110 <_sbrk_r>
 8003a2a:	6030      	str	r0, [r6, #0]
 8003a2c:	0029      	movs	r1, r5
 8003a2e:	0020      	movs	r0, r4
 8003a30:	f000 fb6e 	bl	8004110 <_sbrk_r>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d00a      	beq.n	8003a4e <sbrk_aligned+0x36>
 8003a38:	2303      	movs	r3, #3
 8003a3a:	1cc5      	adds	r5, r0, #3
 8003a3c:	439d      	bics	r5, r3
 8003a3e:	42a8      	cmp	r0, r5
 8003a40:	d007      	beq.n	8003a52 <sbrk_aligned+0x3a>
 8003a42:	1a29      	subs	r1, r5, r0
 8003a44:	0020      	movs	r0, r4
 8003a46:	f000 fb63 	bl	8004110 <_sbrk_r>
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	d101      	bne.n	8003a52 <sbrk_aligned+0x3a>
 8003a4e:	2501      	movs	r5, #1
 8003a50:	426d      	negs	r5, r5
 8003a52:	0028      	movs	r0, r5
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	20000138 	.word	0x20000138

08003a5c <_malloc_r>:
 8003a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5e:	2203      	movs	r2, #3
 8003a60:	1ccb      	adds	r3, r1, #3
 8003a62:	4393      	bics	r3, r2
 8003a64:	3308      	adds	r3, #8
 8003a66:	0006      	movs	r6, r0
 8003a68:	001f      	movs	r7, r3
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d232      	bcs.n	8003ad4 <_malloc_r+0x78>
 8003a6e:	270c      	movs	r7, #12
 8003a70:	42b9      	cmp	r1, r7
 8003a72:	d831      	bhi.n	8003ad8 <_malloc_r+0x7c>
 8003a74:	0030      	movs	r0, r6
 8003a76:	f000 fb85 	bl	8004184 <__malloc_lock>
 8003a7a:	4d32      	ldr	r5, [pc, #200]	; (8003b44 <_malloc_r+0xe8>)
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	001c      	movs	r4, r3
 8003a80:	2c00      	cmp	r4, #0
 8003a82:	d12e      	bne.n	8003ae2 <_malloc_r+0x86>
 8003a84:	0039      	movs	r1, r7
 8003a86:	0030      	movs	r0, r6
 8003a88:	f7ff ffc6 	bl	8003a18 <sbrk_aligned>
 8003a8c:	0004      	movs	r4, r0
 8003a8e:	1c43      	adds	r3, r0, #1
 8003a90:	d11e      	bne.n	8003ad0 <_malloc_r+0x74>
 8003a92:	682c      	ldr	r4, [r5, #0]
 8003a94:	0025      	movs	r5, r4
 8003a96:	2d00      	cmp	r5, #0
 8003a98:	d14a      	bne.n	8003b30 <_malloc_r+0xd4>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	0029      	movs	r1, r5
 8003a9e:	18e3      	adds	r3, r4, r3
 8003aa0:	0030      	movs	r0, r6
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	f000 fb34 	bl	8004110 <_sbrk_r>
 8003aa8:	9b01      	ldr	r3, [sp, #4]
 8003aaa:	4283      	cmp	r3, r0
 8003aac:	d143      	bne.n	8003b36 <_malloc_r+0xda>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	3703      	adds	r7, #3
 8003ab2:	1aff      	subs	r7, r7, r3
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	439f      	bics	r7, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	2f0c      	cmp	r7, #12
 8003abc:	d200      	bcs.n	8003ac0 <_malloc_r+0x64>
 8003abe:	270c      	movs	r7, #12
 8003ac0:	0039      	movs	r1, r7
 8003ac2:	0030      	movs	r0, r6
 8003ac4:	f7ff ffa8 	bl	8003a18 <sbrk_aligned>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d034      	beq.n	8003b36 <_malloc_r+0xda>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	19df      	adds	r7, r3, r7
 8003ad0:	6027      	str	r7, [r4, #0]
 8003ad2:	e013      	b.n	8003afc <_malloc_r+0xa0>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	dacb      	bge.n	8003a70 <_malloc_r+0x14>
 8003ad8:	230c      	movs	r3, #12
 8003ada:	2500      	movs	r5, #0
 8003adc:	6033      	str	r3, [r6, #0]
 8003ade:	0028      	movs	r0, r5
 8003ae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	1bd1      	subs	r1, r2, r7
 8003ae6:	d420      	bmi.n	8003b2a <_malloc_r+0xce>
 8003ae8:	290b      	cmp	r1, #11
 8003aea:	d917      	bls.n	8003b1c <_malloc_r+0xc0>
 8003aec:	19e2      	adds	r2, r4, r7
 8003aee:	6027      	str	r7, [r4, #0]
 8003af0:	42a3      	cmp	r3, r4
 8003af2:	d111      	bne.n	8003b18 <_malloc_r+0xbc>
 8003af4:	602a      	str	r2, [r5, #0]
 8003af6:	6863      	ldr	r3, [r4, #4]
 8003af8:	6011      	str	r1, [r2, #0]
 8003afa:	6053      	str	r3, [r2, #4]
 8003afc:	0030      	movs	r0, r6
 8003afe:	0025      	movs	r5, r4
 8003b00:	f000 fb48 	bl	8004194 <__malloc_unlock>
 8003b04:	2207      	movs	r2, #7
 8003b06:	350b      	adds	r5, #11
 8003b08:	1d23      	adds	r3, r4, #4
 8003b0a:	4395      	bics	r5, r2
 8003b0c:	1aea      	subs	r2, r5, r3
 8003b0e:	429d      	cmp	r5, r3
 8003b10:	d0e5      	beq.n	8003ade <_malloc_r+0x82>
 8003b12:	1b5b      	subs	r3, r3, r5
 8003b14:	50a3      	str	r3, [r4, r2]
 8003b16:	e7e2      	b.n	8003ade <_malloc_r+0x82>
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	e7ec      	b.n	8003af6 <_malloc_r+0x9a>
 8003b1c:	6862      	ldr	r2, [r4, #4]
 8003b1e:	42a3      	cmp	r3, r4
 8003b20:	d101      	bne.n	8003b26 <_malloc_r+0xca>
 8003b22:	602a      	str	r2, [r5, #0]
 8003b24:	e7ea      	b.n	8003afc <_malloc_r+0xa0>
 8003b26:	605a      	str	r2, [r3, #4]
 8003b28:	e7e8      	b.n	8003afc <_malloc_r+0xa0>
 8003b2a:	0023      	movs	r3, r4
 8003b2c:	6864      	ldr	r4, [r4, #4]
 8003b2e:	e7a7      	b.n	8003a80 <_malloc_r+0x24>
 8003b30:	002c      	movs	r4, r5
 8003b32:	686d      	ldr	r5, [r5, #4]
 8003b34:	e7af      	b.n	8003a96 <_malloc_r+0x3a>
 8003b36:	230c      	movs	r3, #12
 8003b38:	0030      	movs	r0, r6
 8003b3a:	6033      	str	r3, [r6, #0]
 8003b3c:	f000 fb2a 	bl	8004194 <__malloc_unlock>
 8003b40:	e7cd      	b.n	8003ade <_malloc_r+0x82>
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	20000134 	.word	0x20000134

08003b48 <__ssputs_r>:
 8003b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b4a:	688e      	ldr	r6, [r1, #8]
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	0007      	movs	r7, r0
 8003b50:	000c      	movs	r4, r1
 8003b52:	9203      	str	r2, [sp, #12]
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	429e      	cmp	r6, r3
 8003b58:	d83c      	bhi.n	8003bd4 <__ssputs_r+0x8c>
 8003b5a:	2390      	movs	r3, #144	; 0x90
 8003b5c:	898a      	ldrh	r2, [r1, #12]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	421a      	tst	r2, r3
 8003b62:	d034      	beq.n	8003bce <__ssputs_r+0x86>
 8003b64:	6909      	ldr	r1, [r1, #16]
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	6960      	ldr	r0, [r4, #20]
 8003b6a:	1a5b      	subs	r3, r3, r1
 8003b6c:	9302      	str	r3, [sp, #8]
 8003b6e:	2303      	movs	r3, #3
 8003b70:	4343      	muls	r3, r0
 8003b72:	0fdd      	lsrs	r5, r3, #31
 8003b74:	18ed      	adds	r5, r5, r3
 8003b76:	9b01      	ldr	r3, [sp, #4]
 8003b78:	9802      	ldr	r0, [sp, #8]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	181b      	adds	r3, r3, r0
 8003b7e:	106d      	asrs	r5, r5, #1
 8003b80:	42ab      	cmp	r3, r5
 8003b82:	d900      	bls.n	8003b86 <__ssputs_r+0x3e>
 8003b84:	001d      	movs	r5, r3
 8003b86:	0553      	lsls	r3, r2, #21
 8003b88:	d532      	bpl.n	8003bf0 <__ssputs_r+0xa8>
 8003b8a:	0029      	movs	r1, r5
 8003b8c:	0038      	movs	r0, r7
 8003b8e:	f7ff ff65 	bl	8003a5c <_malloc_r>
 8003b92:	1e06      	subs	r6, r0, #0
 8003b94:	d109      	bne.n	8003baa <__ssputs_r+0x62>
 8003b96:	230c      	movs	r3, #12
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	2340      	movs	r3, #64	; 0x40
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	89a2      	ldrh	r2, [r4, #12]
 8003ba0:	4240      	negs	r0, r0
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	b005      	add	sp, #20
 8003ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003baa:	9a02      	ldr	r2, [sp, #8]
 8003bac:	6921      	ldr	r1, [r4, #16]
 8003bae:	f000 facc 	bl	800414a <memcpy>
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	4a14      	ldr	r2, [pc, #80]	; (8003c08 <__ssputs_r+0xc0>)
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	2380      	movs	r3, #128	; 0x80
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	81a3      	strh	r3, [r4, #12]
 8003bbe:	9b02      	ldr	r3, [sp, #8]
 8003bc0:	6126      	str	r6, [r4, #16]
 8003bc2:	18f6      	adds	r6, r6, r3
 8003bc4:	6026      	str	r6, [r4, #0]
 8003bc6:	6165      	str	r5, [r4, #20]
 8003bc8:	9e01      	ldr	r6, [sp, #4]
 8003bca:	1aed      	subs	r5, r5, r3
 8003bcc:	60a5      	str	r5, [r4, #8]
 8003bce:	9b01      	ldr	r3, [sp, #4]
 8003bd0:	429e      	cmp	r6, r3
 8003bd2:	d900      	bls.n	8003bd6 <__ssputs_r+0x8e>
 8003bd4:	9e01      	ldr	r6, [sp, #4]
 8003bd6:	0032      	movs	r2, r6
 8003bd8:	9903      	ldr	r1, [sp, #12]
 8003bda:	6820      	ldr	r0, [r4, #0]
 8003bdc:	f000 fabe 	bl	800415c <memmove>
 8003be0:	68a3      	ldr	r3, [r4, #8]
 8003be2:	2000      	movs	r0, #0
 8003be4:	1b9b      	subs	r3, r3, r6
 8003be6:	60a3      	str	r3, [r4, #8]
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	199e      	adds	r6, r3, r6
 8003bec:	6026      	str	r6, [r4, #0]
 8003bee:	e7da      	b.n	8003ba6 <__ssputs_r+0x5e>
 8003bf0:	002a      	movs	r2, r5
 8003bf2:	0038      	movs	r0, r7
 8003bf4:	f000 fb20 	bl	8004238 <_realloc_r>
 8003bf8:	1e06      	subs	r6, r0, #0
 8003bfa:	d1e0      	bne.n	8003bbe <__ssputs_r+0x76>
 8003bfc:	0038      	movs	r0, r7
 8003bfe:	6921      	ldr	r1, [r4, #16]
 8003c00:	f000 fad0 	bl	80041a4 <_free_r>
 8003c04:	e7c7      	b.n	8003b96 <__ssputs_r+0x4e>
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	fffffb7f 	.word	0xfffffb7f

08003c0c <_svfiprintf_r>:
 8003c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0e:	b0a1      	sub	sp, #132	; 0x84
 8003c10:	9003      	str	r0, [sp, #12]
 8003c12:	001d      	movs	r5, r3
 8003c14:	898b      	ldrh	r3, [r1, #12]
 8003c16:	000f      	movs	r7, r1
 8003c18:	0016      	movs	r6, r2
 8003c1a:	061b      	lsls	r3, r3, #24
 8003c1c:	d511      	bpl.n	8003c42 <_svfiprintf_r+0x36>
 8003c1e:	690b      	ldr	r3, [r1, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10e      	bne.n	8003c42 <_svfiprintf_r+0x36>
 8003c24:	2140      	movs	r1, #64	; 0x40
 8003c26:	f7ff ff19 	bl	8003a5c <_malloc_r>
 8003c2a:	6038      	str	r0, [r7, #0]
 8003c2c:	6138      	str	r0, [r7, #16]
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d105      	bne.n	8003c3e <_svfiprintf_r+0x32>
 8003c32:	230c      	movs	r3, #12
 8003c34:	9a03      	ldr	r2, [sp, #12]
 8003c36:	3801      	subs	r0, #1
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	b021      	add	sp, #132	; 0x84
 8003c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3e:	2340      	movs	r3, #64	; 0x40
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	2300      	movs	r3, #0
 8003c44:	ac08      	add	r4, sp, #32
 8003c46:	6163      	str	r3, [r4, #20]
 8003c48:	3320      	adds	r3, #32
 8003c4a:	7663      	strb	r3, [r4, #25]
 8003c4c:	3310      	adds	r3, #16
 8003c4e:	76a3      	strb	r3, [r4, #26]
 8003c50:	9507      	str	r5, [sp, #28]
 8003c52:	0035      	movs	r5, r6
 8003c54:	782b      	ldrb	r3, [r5, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <_svfiprintf_r+0x52>
 8003c5a:	2b25      	cmp	r3, #37	; 0x25
 8003c5c:	d147      	bne.n	8003cee <_svfiprintf_r+0xe2>
 8003c5e:	1bab      	subs	r3, r5, r6
 8003c60:	9305      	str	r3, [sp, #20]
 8003c62:	42b5      	cmp	r5, r6
 8003c64:	d00c      	beq.n	8003c80 <_svfiprintf_r+0x74>
 8003c66:	0032      	movs	r2, r6
 8003c68:	0039      	movs	r1, r7
 8003c6a:	9803      	ldr	r0, [sp, #12]
 8003c6c:	f7ff ff6c 	bl	8003b48 <__ssputs_r>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d100      	bne.n	8003c76 <_svfiprintf_r+0x6a>
 8003c74:	e0ae      	b.n	8003dd4 <_svfiprintf_r+0x1c8>
 8003c76:	6962      	ldr	r2, [r4, #20]
 8003c78:	9b05      	ldr	r3, [sp, #20]
 8003c7a:	4694      	mov	ip, r2
 8003c7c:	4463      	add	r3, ip
 8003c7e:	6163      	str	r3, [r4, #20]
 8003c80:	782b      	ldrb	r3, [r5, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d100      	bne.n	8003c88 <_svfiprintf_r+0x7c>
 8003c86:	e0a5      	b.n	8003dd4 <_svfiprintf_r+0x1c8>
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4252      	negs	r2, r2
 8003c8e:	6062      	str	r2, [r4, #4]
 8003c90:	a904      	add	r1, sp, #16
 8003c92:	3254      	adds	r2, #84	; 0x54
 8003c94:	1852      	adds	r2, r2, r1
 8003c96:	1c6e      	adds	r6, r5, #1
 8003c98:	6023      	str	r3, [r4, #0]
 8003c9a:	60e3      	str	r3, [r4, #12]
 8003c9c:	60a3      	str	r3, [r4, #8]
 8003c9e:	7013      	strb	r3, [r2, #0]
 8003ca0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ca2:	2205      	movs	r2, #5
 8003ca4:	7831      	ldrb	r1, [r6, #0]
 8003ca6:	4854      	ldr	r0, [pc, #336]	; (8003df8 <_svfiprintf_r+0x1ec>)
 8003ca8:	f000 fa44 	bl	8004134 <memchr>
 8003cac:	1c75      	adds	r5, r6, #1
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d11f      	bne.n	8003cf2 <_svfiprintf_r+0xe6>
 8003cb2:	6822      	ldr	r2, [r4, #0]
 8003cb4:	06d3      	lsls	r3, r2, #27
 8003cb6:	d504      	bpl.n	8003cc2 <_svfiprintf_r+0xb6>
 8003cb8:	2353      	movs	r3, #83	; 0x53
 8003cba:	a904      	add	r1, sp, #16
 8003cbc:	185b      	adds	r3, r3, r1
 8003cbe:	2120      	movs	r1, #32
 8003cc0:	7019      	strb	r1, [r3, #0]
 8003cc2:	0713      	lsls	r3, r2, #28
 8003cc4:	d504      	bpl.n	8003cd0 <_svfiprintf_r+0xc4>
 8003cc6:	2353      	movs	r3, #83	; 0x53
 8003cc8:	a904      	add	r1, sp, #16
 8003cca:	185b      	adds	r3, r3, r1
 8003ccc:	212b      	movs	r1, #43	; 0x2b
 8003cce:	7019      	strb	r1, [r3, #0]
 8003cd0:	7833      	ldrb	r3, [r6, #0]
 8003cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd4:	d016      	beq.n	8003d04 <_svfiprintf_r+0xf8>
 8003cd6:	0035      	movs	r5, r6
 8003cd8:	2100      	movs	r1, #0
 8003cda:	200a      	movs	r0, #10
 8003cdc:	68e3      	ldr	r3, [r4, #12]
 8003cde:	782a      	ldrb	r2, [r5, #0]
 8003ce0:	1c6e      	adds	r6, r5, #1
 8003ce2:	3a30      	subs	r2, #48	; 0x30
 8003ce4:	2a09      	cmp	r2, #9
 8003ce6:	d94e      	bls.n	8003d86 <_svfiprintf_r+0x17a>
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	d111      	bne.n	8003d10 <_svfiprintf_r+0x104>
 8003cec:	e017      	b.n	8003d1e <_svfiprintf_r+0x112>
 8003cee:	3501      	adds	r5, #1
 8003cf0:	e7b0      	b.n	8003c54 <_svfiprintf_r+0x48>
 8003cf2:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <_svfiprintf_r+0x1ec>)
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	1ac0      	subs	r0, r0, r3
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	4083      	lsls	r3, r0
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	002e      	movs	r6, r5
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	e7ce      	b.n	8003ca2 <_svfiprintf_r+0x96>
 8003d04:	9b07      	ldr	r3, [sp, #28]
 8003d06:	1d19      	adds	r1, r3, #4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	9107      	str	r1, [sp, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	db01      	blt.n	8003d14 <_svfiprintf_r+0x108>
 8003d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d12:	e004      	b.n	8003d1e <_svfiprintf_r+0x112>
 8003d14:	425b      	negs	r3, r3
 8003d16:	60e3      	str	r3, [r4, #12]
 8003d18:	2302      	movs	r3, #2
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	782b      	ldrb	r3, [r5, #0]
 8003d20:	2b2e      	cmp	r3, #46	; 0x2e
 8003d22:	d10a      	bne.n	8003d3a <_svfiprintf_r+0x12e>
 8003d24:	786b      	ldrb	r3, [r5, #1]
 8003d26:	2b2a      	cmp	r3, #42	; 0x2a
 8003d28:	d135      	bne.n	8003d96 <_svfiprintf_r+0x18a>
 8003d2a:	9b07      	ldr	r3, [sp, #28]
 8003d2c:	3502      	adds	r5, #2
 8003d2e:	1d1a      	adds	r2, r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	9207      	str	r2, [sp, #28]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	db2b      	blt.n	8003d90 <_svfiprintf_r+0x184>
 8003d38:	9309      	str	r3, [sp, #36]	; 0x24
 8003d3a:	4e30      	ldr	r6, [pc, #192]	; (8003dfc <_svfiprintf_r+0x1f0>)
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	0030      	movs	r0, r6
 8003d40:	7829      	ldrb	r1, [r5, #0]
 8003d42:	f000 f9f7 	bl	8004134 <memchr>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d006      	beq.n	8003d58 <_svfiprintf_r+0x14c>
 8003d4a:	2340      	movs	r3, #64	; 0x40
 8003d4c:	1b80      	subs	r0, r0, r6
 8003d4e:	4083      	lsls	r3, r0
 8003d50:	6822      	ldr	r2, [r4, #0]
 8003d52:	3501      	adds	r5, #1
 8003d54:	4313      	orrs	r3, r2
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	7829      	ldrb	r1, [r5, #0]
 8003d5a:	2206      	movs	r2, #6
 8003d5c:	4828      	ldr	r0, [pc, #160]	; (8003e00 <_svfiprintf_r+0x1f4>)
 8003d5e:	1c6e      	adds	r6, r5, #1
 8003d60:	7621      	strb	r1, [r4, #24]
 8003d62:	f000 f9e7 	bl	8004134 <memchr>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d03c      	beq.n	8003de4 <_svfiprintf_r+0x1d8>
 8003d6a:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <_svfiprintf_r+0x1f8>)
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d125      	bne.n	8003dbc <_svfiprintf_r+0x1b0>
 8003d70:	2207      	movs	r2, #7
 8003d72:	9b07      	ldr	r3, [sp, #28]
 8003d74:	3307      	adds	r3, #7
 8003d76:	4393      	bics	r3, r2
 8003d78:	3308      	adds	r3, #8
 8003d7a:	9307      	str	r3, [sp, #28]
 8003d7c:	6963      	ldr	r3, [r4, #20]
 8003d7e:	9a04      	ldr	r2, [sp, #16]
 8003d80:	189b      	adds	r3, r3, r2
 8003d82:	6163      	str	r3, [r4, #20]
 8003d84:	e765      	b.n	8003c52 <_svfiprintf_r+0x46>
 8003d86:	4343      	muls	r3, r0
 8003d88:	0035      	movs	r5, r6
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	189b      	adds	r3, r3, r2
 8003d8e:	e7a6      	b.n	8003cde <_svfiprintf_r+0xd2>
 8003d90:	2301      	movs	r3, #1
 8003d92:	425b      	negs	r3, r3
 8003d94:	e7d0      	b.n	8003d38 <_svfiprintf_r+0x12c>
 8003d96:	2300      	movs	r3, #0
 8003d98:	200a      	movs	r0, #10
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	3501      	adds	r5, #1
 8003d9e:	6063      	str	r3, [r4, #4]
 8003da0:	7829      	ldrb	r1, [r5, #0]
 8003da2:	1c6e      	adds	r6, r5, #1
 8003da4:	3930      	subs	r1, #48	; 0x30
 8003da6:	2909      	cmp	r1, #9
 8003da8:	d903      	bls.n	8003db2 <_svfiprintf_r+0x1a6>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0c5      	beq.n	8003d3a <_svfiprintf_r+0x12e>
 8003dae:	9209      	str	r2, [sp, #36]	; 0x24
 8003db0:	e7c3      	b.n	8003d3a <_svfiprintf_r+0x12e>
 8003db2:	4342      	muls	r2, r0
 8003db4:	0035      	movs	r5, r6
 8003db6:	2301      	movs	r3, #1
 8003db8:	1852      	adds	r2, r2, r1
 8003dba:	e7f1      	b.n	8003da0 <_svfiprintf_r+0x194>
 8003dbc:	ab07      	add	r3, sp, #28
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	003a      	movs	r2, r7
 8003dc2:	0021      	movs	r1, r4
 8003dc4:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <_svfiprintf_r+0x1fc>)
 8003dc6:	9803      	ldr	r0, [sp, #12]
 8003dc8:	e000      	b.n	8003dcc <_svfiprintf_r+0x1c0>
 8003dca:	bf00      	nop
 8003dcc:	9004      	str	r0, [sp, #16]
 8003dce:	9b04      	ldr	r3, [sp, #16]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	d1d3      	bne.n	8003d7c <_svfiprintf_r+0x170>
 8003dd4:	89bb      	ldrh	r3, [r7, #12]
 8003dd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003dd8:	065b      	lsls	r3, r3, #25
 8003dda:	d400      	bmi.n	8003dde <_svfiprintf_r+0x1d2>
 8003ddc:	e72d      	b.n	8003c3a <_svfiprintf_r+0x2e>
 8003dde:	2001      	movs	r0, #1
 8003de0:	4240      	negs	r0, r0
 8003de2:	e72a      	b.n	8003c3a <_svfiprintf_r+0x2e>
 8003de4:	ab07      	add	r3, sp, #28
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	003a      	movs	r2, r7
 8003dea:	0021      	movs	r1, r4
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <_svfiprintf_r+0x1fc>)
 8003dee:	9803      	ldr	r0, [sp, #12]
 8003df0:	f000 f87c 	bl	8003eec <_printf_i>
 8003df4:	e7ea      	b.n	8003dcc <_svfiprintf_r+0x1c0>
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	08004a78 	.word	0x08004a78
 8003dfc:	08004a7e 	.word	0x08004a7e
 8003e00:	08004a82 	.word	0x08004a82
 8003e04:	00000000 	.word	0x00000000
 8003e08:	08003b49 	.word	0x08003b49

08003e0c <_printf_common>:
 8003e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e0e:	0015      	movs	r5, r2
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	688a      	ldr	r2, [r1, #8]
 8003e14:	690b      	ldr	r3, [r1, #16]
 8003e16:	000c      	movs	r4, r1
 8003e18:	9000      	str	r0, [sp, #0]
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	da00      	bge.n	8003e20 <_printf_common+0x14>
 8003e1e:	0013      	movs	r3, r2
 8003e20:	0022      	movs	r2, r4
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	3243      	adds	r2, #67	; 0x43
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	2a00      	cmp	r2, #0
 8003e2a:	d001      	beq.n	8003e30 <_printf_common+0x24>
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	069b      	lsls	r3, r3, #26
 8003e34:	d502      	bpl.n	8003e3c <_printf_common+0x30>
 8003e36:	682b      	ldr	r3, [r5, #0]
 8003e38:	3302      	adds	r3, #2
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	6822      	ldr	r2, [r4, #0]
 8003e3e:	2306      	movs	r3, #6
 8003e40:	0017      	movs	r7, r2
 8003e42:	401f      	ands	r7, r3
 8003e44:	421a      	tst	r2, r3
 8003e46:	d027      	beq.n	8003e98 <_printf_common+0x8c>
 8003e48:	0023      	movs	r3, r4
 8003e4a:	3343      	adds	r3, #67	; 0x43
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	4193      	sbcs	r3, r2
 8003e52:	6822      	ldr	r2, [r4, #0]
 8003e54:	0692      	lsls	r2, r2, #26
 8003e56:	d430      	bmi.n	8003eba <_printf_common+0xae>
 8003e58:	0022      	movs	r2, r4
 8003e5a:	9901      	ldr	r1, [sp, #4]
 8003e5c:	9800      	ldr	r0, [sp, #0]
 8003e5e:	9e08      	ldr	r6, [sp, #32]
 8003e60:	3243      	adds	r2, #67	; 0x43
 8003e62:	47b0      	blx	r6
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d025      	beq.n	8003eb4 <_printf_common+0xa8>
 8003e68:	2306      	movs	r3, #6
 8003e6a:	6820      	ldr	r0, [r4, #0]
 8003e6c:	682a      	ldr	r2, [r5, #0]
 8003e6e:	68e1      	ldr	r1, [r4, #12]
 8003e70:	2500      	movs	r5, #0
 8003e72:	4003      	ands	r3, r0
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d103      	bne.n	8003e80 <_printf_common+0x74>
 8003e78:	1a8d      	subs	r5, r1, r2
 8003e7a:	43eb      	mvns	r3, r5
 8003e7c:	17db      	asrs	r3, r3, #31
 8003e7e:	401d      	ands	r5, r3
 8003e80:	68a3      	ldr	r3, [r4, #8]
 8003e82:	6922      	ldr	r2, [r4, #16]
 8003e84:	4293      	cmp	r3, r2
 8003e86:	dd01      	ble.n	8003e8c <_printf_common+0x80>
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	18ed      	adds	r5, r5, r3
 8003e8c:	2700      	movs	r7, #0
 8003e8e:	42bd      	cmp	r5, r7
 8003e90:	d120      	bne.n	8003ed4 <_printf_common+0xc8>
 8003e92:	2000      	movs	r0, #0
 8003e94:	e010      	b.n	8003eb8 <_printf_common+0xac>
 8003e96:	3701      	adds	r7, #1
 8003e98:	68e3      	ldr	r3, [r4, #12]
 8003e9a:	682a      	ldr	r2, [r5, #0]
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	42bb      	cmp	r3, r7
 8003ea0:	ddd2      	ble.n	8003e48 <_printf_common+0x3c>
 8003ea2:	0022      	movs	r2, r4
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	9901      	ldr	r1, [sp, #4]
 8003ea8:	9800      	ldr	r0, [sp, #0]
 8003eaa:	9e08      	ldr	r6, [sp, #32]
 8003eac:	3219      	adds	r2, #25
 8003eae:	47b0      	blx	r6
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	d1f0      	bne.n	8003e96 <_printf_common+0x8a>
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	4240      	negs	r0, r0
 8003eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eba:	2030      	movs	r0, #48	; 0x30
 8003ebc:	18e1      	adds	r1, r4, r3
 8003ebe:	3143      	adds	r1, #67	; 0x43
 8003ec0:	7008      	strb	r0, [r1, #0]
 8003ec2:	0021      	movs	r1, r4
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	3145      	adds	r1, #69	; 0x45
 8003ec8:	7809      	ldrb	r1, [r1, #0]
 8003eca:	18a2      	adds	r2, r4, r2
 8003ecc:	3243      	adds	r2, #67	; 0x43
 8003ece:	3302      	adds	r3, #2
 8003ed0:	7011      	strb	r1, [r2, #0]
 8003ed2:	e7c1      	b.n	8003e58 <_printf_common+0x4c>
 8003ed4:	0022      	movs	r2, r4
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	9901      	ldr	r1, [sp, #4]
 8003eda:	9800      	ldr	r0, [sp, #0]
 8003edc:	9e08      	ldr	r6, [sp, #32]
 8003ede:	321a      	adds	r2, #26
 8003ee0:	47b0      	blx	r6
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	d0e6      	beq.n	8003eb4 <_printf_common+0xa8>
 8003ee6:	3701      	adds	r7, #1
 8003ee8:	e7d1      	b.n	8003e8e <_printf_common+0x82>
	...

08003eec <_printf_i>:
 8003eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eee:	b08b      	sub	sp, #44	; 0x2c
 8003ef0:	9206      	str	r2, [sp, #24]
 8003ef2:	000a      	movs	r2, r1
 8003ef4:	3243      	adds	r2, #67	; 0x43
 8003ef6:	9307      	str	r3, [sp, #28]
 8003ef8:	9005      	str	r0, [sp, #20]
 8003efa:	9204      	str	r2, [sp, #16]
 8003efc:	7e0a      	ldrb	r2, [r1, #24]
 8003efe:	000c      	movs	r4, r1
 8003f00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f02:	2a78      	cmp	r2, #120	; 0x78
 8003f04:	d807      	bhi.n	8003f16 <_printf_i+0x2a>
 8003f06:	2a62      	cmp	r2, #98	; 0x62
 8003f08:	d809      	bhi.n	8003f1e <_printf_i+0x32>
 8003f0a:	2a00      	cmp	r2, #0
 8003f0c:	d100      	bne.n	8003f10 <_printf_i+0x24>
 8003f0e:	e0c1      	b.n	8004094 <_printf_i+0x1a8>
 8003f10:	2a58      	cmp	r2, #88	; 0x58
 8003f12:	d100      	bne.n	8003f16 <_printf_i+0x2a>
 8003f14:	e08c      	b.n	8004030 <_printf_i+0x144>
 8003f16:	0026      	movs	r6, r4
 8003f18:	3642      	adds	r6, #66	; 0x42
 8003f1a:	7032      	strb	r2, [r6, #0]
 8003f1c:	e022      	b.n	8003f64 <_printf_i+0x78>
 8003f1e:	0010      	movs	r0, r2
 8003f20:	3863      	subs	r0, #99	; 0x63
 8003f22:	2815      	cmp	r0, #21
 8003f24:	d8f7      	bhi.n	8003f16 <_printf_i+0x2a>
 8003f26:	f7fc f8f3 	bl	8000110 <__gnu_thumb1_case_shi>
 8003f2a:	0016      	.short	0x0016
 8003f2c:	fff6001f 	.word	0xfff6001f
 8003f30:	fff6fff6 	.word	0xfff6fff6
 8003f34:	001ffff6 	.word	0x001ffff6
 8003f38:	fff6fff6 	.word	0xfff6fff6
 8003f3c:	fff6fff6 	.word	0xfff6fff6
 8003f40:	003600a8 	.word	0x003600a8
 8003f44:	fff6009a 	.word	0xfff6009a
 8003f48:	00b9fff6 	.word	0x00b9fff6
 8003f4c:	0036fff6 	.word	0x0036fff6
 8003f50:	fff6fff6 	.word	0xfff6fff6
 8003f54:	009e      	.short	0x009e
 8003f56:	0026      	movs	r6, r4
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	3642      	adds	r6, #66	; 0x42
 8003f5c:	1d11      	adds	r1, r2, #4
 8003f5e:	6019      	str	r1, [r3, #0]
 8003f60:	6813      	ldr	r3, [r2, #0]
 8003f62:	7033      	strb	r3, [r6, #0]
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0a7      	b.n	80040b8 <_printf_i+0x1cc>
 8003f68:	6808      	ldr	r0, [r1, #0]
 8003f6a:	6819      	ldr	r1, [r3, #0]
 8003f6c:	1d0a      	adds	r2, r1, #4
 8003f6e:	0605      	lsls	r5, r0, #24
 8003f70:	d50b      	bpl.n	8003f8a <_printf_i+0x9e>
 8003f72:	680d      	ldr	r5, [r1, #0]
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	2d00      	cmp	r5, #0
 8003f78:	da03      	bge.n	8003f82 <_printf_i+0x96>
 8003f7a:	232d      	movs	r3, #45	; 0x2d
 8003f7c:	9a04      	ldr	r2, [sp, #16]
 8003f7e:	426d      	negs	r5, r5
 8003f80:	7013      	strb	r3, [r2, #0]
 8003f82:	4b61      	ldr	r3, [pc, #388]	; (8004108 <_printf_i+0x21c>)
 8003f84:	270a      	movs	r7, #10
 8003f86:	9303      	str	r3, [sp, #12]
 8003f88:	e01b      	b.n	8003fc2 <_printf_i+0xd6>
 8003f8a:	680d      	ldr	r5, [r1, #0]
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	0641      	lsls	r1, r0, #25
 8003f90:	d5f1      	bpl.n	8003f76 <_printf_i+0x8a>
 8003f92:	b22d      	sxth	r5, r5
 8003f94:	e7ef      	b.n	8003f76 <_printf_i+0x8a>
 8003f96:	680d      	ldr	r5, [r1, #0]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	1d08      	adds	r0, r1, #4
 8003f9c:	6018      	str	r0, [r3, #0]
 8003f9e:	062e      	lsls	r6, r5, #24
 8003fa0:	d501      	bpl.n	8003fa6 <_printf_i+0xba>
 8003fa2:	680d      	ldr	r5, [r1, #0]
 8003fa4:	e003      	b.n	8003fae <_printf_i+0xc2>
 8003fa6:	066d      	lsls	r5, r5, #25
 8003fa8:	d5fb      	bpl.n	8003fa2 <_printf_i+0xb6>
 8003faa:	680d      	ldr	r5, [r1, #0]
 8003fac:	b2ad      	uxth	r5, r5
 8003fae:	4b56      	ldr	r3, [pc, #344]	; (8004108 <_printf_i+0x21c>)
 8003fb0:	2708      	movs	r7, #8
 8003fb2:	9303      	str	r3, [sp, #12]
 8003fb4:	2a6f      	cmp	r2, #111	; 0x6f
 8003fb6:	d000      	beq.n	8003fba <_printf_i+0xce>
 8003fb8:	3702      	adds	r7, #2
 8003fba:	0023      	movs	r3, r4
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	3343      	adds	r3, #67	; 0x43
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	6863      	ldr	r3, [r4, #4]
 8003fc4:	60a3      	str	r3, [r4, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db03      	blt.n	8003fd2 <_printf_i+0xe6>
 8003fca:	2204      	movs	r2, #4
 8003fcc:	6821      	ldr	r1, [r4, #0]
 8003fce:	4391      	bics	r1, r2
 8003fd0:	6021      	str	r1, [r4, #0]
 8003fd2:	2d00      	cmp	r5, #0
 8003fd4:	d102      	bne.n	8003fdc <_printf_i+0xf0>
 8003fd6:	9e04      	ldr	r6, [sp, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00c      	beq.n	8003ff6 <_printf_i+0x10a>
 8003fdc:	9e04      	ldr	r6, [sp, #16]
 8003fde:	0028      	movs	r0, r5
 8003fe0:	0039      	movs	r1, r7
 8003fe2:	f7fc f925 	bl	8000230 <__aeabi_uidivmod>
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	3e01      	subs	r6, #1
 8003fea:	5c5b      	ldrb	r3, [r3, r1]
 8003fec:	7033      	strb	r3, [r6, #0]
 8003fee:	002b      	movs	r3, r5
 8003ff0:	0005      	movs	r5, r0
 8003ff2:	429f      	cmp	r7, r3
 8003ff4:	d9f3      	bls.n	8003fde <_printf_i+0xf2>
 8003ff6:	2f08      	cmp	r7, #8
 8003ff8:	d109      	bne.n	800400e <_printf_i+0x122>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	07db      	lsls	r3, r3, #31
 8003ffe:	d506      	bpl.n	800400e <_printf_i+0x122>
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	6922      	ldr	r2, [r4, #16]
 8004004:	4293      	cmp	r3, r2
 8004006:	dc02      	bgt.n	800400e <_printf_i+0x122>
 8004008:	2330      	movs	r3, #48	; 0x30
 800400a:	3e01      	subs	r6, #1
 800400c:	7033      	strb	r3, [r6, #0]
 800400e:	9b04      	ldr	r3, [sp, #16]
 8004010:	1b9b      	subs	r3, r3, r6
 8004012:	6123      	str	r3, [r4, #16]
 8004014:	9b07      	ldr	r3, [sp, #28]
 8004016:	0021      	movs	r1, r4
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	9805      	ldr	r0, [sp, #20]
 800401c:	9b06      	ldr	r3, [sp, #24]
 800401e:	aa09      	add	r2, sp, #36	; 0x24
 8004020:	f7ff fef4 	bl	8003e0c <_printf_common>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d14c      	bne.n	80040c2 <_printf_i+0x1d6>
 8004028:	2001      	movs	r0, #1
 800402a:	4240      	negs	r0, r0
 800402c:	b00b      	add	sp, #44	; 0x2c
 800402e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004030:	3145      	adds	r1, #69	; 0x45
 8004032:	700a      	strb	r2, [r1, #0]
 8004034:	4a34      	ldr	r2, [pc, #208]	; (8004108 <_printf_i+0x21c>)
 8004036:	9203      	str	r2, [sp, #12]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	6821      	ldr	r1, [r4, #0]
 800403c:	ca20      	ldmia	r2!, {r5}
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	0608      	lsls	r0, r1, #24
 8004042:	d516      	bpl.n	8004072 <_printf_i+0x186>
 8004044:	07cb      	lsls	r3, r1, #31
 8004046:	d502      	bpl.n	800404e <_printf_i+0x162>
 8004048:	2320      	movs	r3, #32
 800404a:	4319      	orrs	r1, r3
 800404c:	6021      	str	r1, [r4, #0]
 800404e:	2710      	movs	r7, #16
 8004050:	2d00      	cmp	r5, #0
 8004052:	d1b2      	bne.n	8003fba <_printf_i+0xce>
 8004054:	2320      	movs	r3, #32
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	439a      	bics	r2, r3
 800405a:	6022      	str	r2, [r4, #0]
 800405c:	e7ad      	b.n	8003fba <_printf_i+0xce>
 800405e:	2220      	movs	r2, #32
 8004060:	6809      	ldr	r1, [r1, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	6022      	str	r2, [r4, #0]
 8004066:	0022      	movs	r2, r4
 8004068:	2178      	movs	r1, #120	; 0x78
 800406a:	3245      	adds	r2, #69	; 0x45
 800406c:	7011      	strb	r1, [r2, #0]
 800406e:	4a27      	ldr	r2, [pc, #156]	; (800410c <_printf_i+0x220>)
 8004070:	e7e1      	b.n	8004036 <_printf_i+0x14a>
 8004072:	0648      	lsls	r0, r1, #25
 8004074:	d5e6      	bpl.n	8004044 <_printf_i+0x158>
 8004076:	b2ad      	uxth	r5, r5
 8004078:	e7e4      	b.n	8004044 <_printf_i+0x158>
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	680d      	ldr	r5, [r1, #0]
 800407e:	1d10      	adds	r0, r2, #4
 8004080:	6949      	ldr	r1, [r1, #20]
 8004082:	6018      	str	r0, [r3, #0]
 8004084:	6813      	ldr	r3, [r2, #0]
 8004086:	062e      	lsls	r6, r5, #24
 8004088:	d501      	bpl.n	800408e <_printf_i+0x1a2>
 800408a:	6019      	str	r1, [r3, #0]
 800408c:	e002      	b.n	8004094 <_printf_i+0x1a8>
 800408e:	066d      	lsls	r5, r5, #25
 8004090:	d5fb      	bpl.n	800408a <_printf_i+0x19e>
 8004092:	8019      	strh	r1, [r3, #0]
 8004094:	2300      	movs	r3, #0
 8004096:	9e04      	ldr	r6, [sp, #16]
 8004098:	6123      	str	r3, [r4, #16]
 800409a:	e7bb      	b.n	8004014 <_printf_i+0x128>
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	1d11      	adds	r1, r2, #4
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	6816      	ldr	r6, [r2, #0]
 80040a4:	2100      	movs	r1, #0
 80040a6:	0030      	movs	r0, r6
 80040a8:	6862      	ldr	r2, [r4, #4]
 80040aa:	f000 f843 	bl	8004134 <memchr>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d001      	beq.n	80040b6 <_printf_i+0x1ca>
 80040b2:	1b80      	subs	r0, r0, r6
 80040b4:	6060      	str	r0, [r4, #4]
 80040b6:	6863      	ldr	r3, [r4, #4]
 80040b8:	6123      	str	r3, [r4, #16]
 80040ba:	2300      	movs	r3, #0
 80040bc:	9a04      	ldr	r2, [sp, #16]
 80040be:	7013      	strb	r3, [r2, #0]
 80040c0:	e7a8      	b.n	8004014 <_printf_i+0x128>
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	0032      	movs	r2, r6
 80040c6:	9906      	ldr	r1, [sp, #24]
 80040c8:	9805      	ldr	r0, [sp, #20]
 80040ca:	9d07      	ldr	r5, [sp, #28]
 80040cc:	47a8      	blx	r5
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	d0aa      	beq.n	8004028 <_printf_i+0x13c>
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	079b      	lsls	r3, r3, #30
 80040d6:	d415      	bmi.n	8004104 <_printf_i+0x218>
 80040d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040da:	68e0      	ldr	r0, [r4, #12]
 80040dc:	4298      	cmp	r0, r3
 80040de:	daa5      	bge.n	800402c <_printf_i+0x140>
 80040e0:	0018      	movs	r0, r3
 80040e2:	e7a3      	b.n	800402c <_printf_i+0x140>
 80040e4:	0022      	movs	r2, r4
 80040e6:	2301      	movs	r3, #1
 80040e8:	9906      	ldr	r1, [sp, #24]
 80040ea:	9805      	ldr	r0, [sp, #20]
 80040ec:	9e07      	ldr	r6, [sp, #28]
 80040ee:	3219      	adds	r2, #25
 80040f0:	47b0      	blx	r6
 80040f2:	1c43      	adds	r3, r0, #1
 80040f4:	d098      	beq.n	8004028 <_printf_i+0x13c>
 80040f6:	3501      	adds	r5, #1
 80040f8:	68e3      	ldr	r3, [r4, #12]
 80040fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	42ab      	cmp	r3, r5
 8004100:	dcf0      	bgt.n	80040e4 <_printf_i+0x1f8>
 8004102:	e7e9      	b.n	80040d8 <_printf_i+0x1ec>
 8004104:	2500      	movs	r5, #0
 8004106:	e7f7      	b.n	80040f8 <_printf_i+0x20c>
 8004108:	08004a89 	.word	0x08004a89
 800410c:	08004a9a 	.word	0x08004a9a

08004110 <_sbrk_r>:
 8004110:	2300      	movs	r3, #0
 8004112:	b570      	push	{r4, r5, r6, lr}
 8004114:	4d06      	ldr	r5, [pc, #24]	; (8004130 <_sbrk_r+0x20>)
 8004116:	0004      	movs	r4, r0
 8004118:	0008      	movs	r0, r1
 800411a:	602b      	str	r3, [r5, #0]
 800411c:	f7fd f856 	bl	80011cc <_sbrk>
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	d103      	bne.n	800412c <_sbrk_r+0x1c>
 8004124:	682b      	ldr	r3, [r5, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d000      	beq.n	800412c <_sbrk_r+0x1c>
 800412a:	6023      	str	r3, [r4, #0]
 800412c:	bd70      	pop	{r4, r5, r6, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	2000013c 	.word	0x2000013c

08004134 <memchr>:
 8004134:	b2c9      	uxtb	r1, r1
 8004136:	1882      	adds	r2, r0, r2
 8004138:	4290      	cmp	r0, r2
 800413a:	d101      	bne.n	8004140 <memchr+0xc>
 800413c:	2000      	movs	r0, #0
 800413e:	4770      	bx	lr
 8004140:	7803      	ldrb	r3, [r0, #0]
 8004142:	428b      	cmp	r3, r1
 8004144:	d0fb      	beq.n	800413e <memchr+0xa>
 8004146:	3001      	adds	r0, #1
 8004148:	e7f6      	b.n	8004138 <memchr+0x4>

0800414a <memcpy>:
 800414a:	2300      	movs	r3, #0
 800414c:	b510      	push	{r4, lr}
 800414e:	429a      	cmp	r2, r3
 8004150:	d100      	bne.n	8004154 <memcpy+0xa>
 8004152:	bd10      	pop	{r4, pc}
 8004154:	5ccc      	ldrb	r4, [r1, r3]
 8004156:	54c4      	strb	r4, [r0, r3]
 8004158:	3301      	adds	r3, #1
 800415a:	e7f8      	b.n	800414e <memcpy+0x4>

0800415c <memmove>:
 800415c:	b510      	push	{r4, lr}
 800415e:	4288      	cmp	r0, r1
 8004160:	d902      	bls.n	8004168 <memmove+0xc>
 8004162:	188b      	adds	r3, r1, r2
 8004164:	4298      	cmp	r0, r3
 8004166:	d303      	bcc.n	8004170 <memmove+0x14>
 8004168:	2300      	movs	r3, #0
 800416a:	e007      	b.n	800417c <memmove+0x20>
 800416c:	5c8b      	ldrb	r3, [r1, r2]
 800416e:	5483      	strb	r3, [r0, r2]
 8004170:	3a01      	subs	r2, #1
 8004172:	d2fb      	bcs.n	800416c <memmove+0x10>
 8004174:	bd10      	pop	{r4, pc}
 8004176:	5ccc      	ldrb	r4, [r1, r3]
 8004178:	54c4      	strb	r4, [r0, r3]
 800417a:	3301      	adds	r3, #1
 800417c:	429a      	cmp	r2, r3
 800417e:	d1fa      	bne.n	8004176 <memmove+0x1a>
 8004180:	e7f8      	b.n	8004174 <memmove+0x18>
	...

08004184 <__malloc_lock>:
 8004184:	b510      	push	{r4, lr}
 8004186:	4802      	ldr	r0, [pc, #8]	; (8004190 <__malloc_lock+0xc>)
 8004188:	f7ff fc44 	bl	8003a14 <__retarget_lock_acquire_recursive>
 800418c:	bd10      	pop	{r4, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	20000130 	.word	0x20000130

08004194 <__malloc_unlock>:
 8004194:	b510      	push	{r4, lr}
 8004196:	4802      	ldr	r0, [pc, #8]	; (80041a0 <__malloc_unlock+0xc>)
 8004198:	f7ff fc3d 	bl	8003a16 <__retarget_lock_release_recursive>
 800419c:	bd10      	pop	{r4, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	20000130 	.word	0x20000130

080041a4 <_free_r>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	0005      	movs	r5, r0
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d010      	beq.n	80041ce <_free_r+0x2a>
 80041ac:	1f0c      	subs	r4, r1, #4
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	da00      	bge.n	80041b6 <_free_r+0x12>
 80041b4:	18e4      	adds	r4, r4, r3
 80041b6:	0028      	movs	r0, r5
 80041b8:	f7ff ffe4 	bl	8004184 <__malloc_lock>
 80041bc:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <_free_r+0x90>)
 80041be:	6813      	ldr	r3, [r2, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <_free_r+0x2c>
 80041c4:	6063      	str	r3, [r4, #4]
 80041c6:	6014      	str	r4, [r2, #0]
 80041c8:	0028      	movs	r0, r5
 80041ca:	f7ff ffe3 	bl	8004194 <__malloc_unlock>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	d908      	bls.n	80041e6 <_free_r+0x42>
 80041d4:	6821      	ldr	r1, [r4, #0]
 80041d6:	1860      	adds	r0, r4, r1
 80041d8:	4283      	cmp	r3, r0
 80041da:	d1f3      	bne.n	80041c4 <_free_r+0x20>
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	1841      	adds	r1, r0, r1
 80041e2:	6021      	str	r1, [r4, #0]
 80041e4:	e7ee      	b.n	80041c4 <_free_r+0x20>
 80041e6:	001a      	movs	r2, r3
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <_free_r+0x4e>
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	d9f9      	bls.n	80041e6 <_free_r+0x42>
 80041f2:	6811      	ldr	r1, [r2, #0]
 80041f4:	1850      	adds	r0, r2, r1
 80041f6:	42a0      	cmp	r0, r4
 80041f8:	d10b      	bne.n	8004212 <_free_r+0x6e>
 80041fa:	6820      	ldr	r0, [r4, #0]
 80041fc:	1809      	adds	r1, r1, r0
 80041fe:	1850      	adds	r0, r2, r1
 8004200:	6011      	str	r1, [r2, #0]
 8004202:	4283      	cmp	r3, r0
 8004204:	d1e0      	bne.n	80041c8 <_free_r+0x24>
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	1841      	adds	r1, r0, r1
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	6053      	str	r3, [r2, #4]
 8004210:	e7da      	b.n	80041c8 <_free_r+0x24>
 8004212:	42a0      	cmp	r0, r4
 8004214:	d902      	bls.n	800421c <_free_r+0x78>
 8004216:	230c      	movs	r3, #12
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	e7d5      	b.n	80041c8 <_free_r+0x24>
 800421c:	6821      	ldr	r1, [r4, #0]
 800421e:	1860      	adds	r0, r4, r1
 8004220:	4283      	cmp	r3, r0
 8004222:	d103      	bne.n	800422c <_free_r+0x88>
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	1841      	adds	r1, r0, r1
 800422a:	6021      	str	r1, [r4, #0]
 800422c:	6063      	str	r3, [r4, #4]
 800422e:	6054      	str	r4, [r2, #4]
 8004230:	e7ca      	b.n	80041c8 <_free_r+0x24>
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	20000134 	.word	0x20000134

08004238 <_realloc_r>:
 8004238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800423a:	0007      	movs	r7, r0
 800423c:	000e      	movs	r6, r1
 800423e:	0014      	movs	r4, r2
 8004240:	2900      	cmp	r1, #0
 8004242:	d105      	bne.n	8004250 <_realloc_r+0x18>
 8004244:	0011      	movs	r1, r2
 8004246:	f7ff fc09 	bl	8003a5c <_malloc_r>
 800424a:	0005      	movs	r5, r0
 800424c:	0028      	movs	r0, r5
 800424e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004250:	2a00      	cmp	r2, #0
 8004252:	d103      	bne.n	800425c <_realloc_r+0x24>
 8004254:	f7ff ffa6 	bl	80041a4 <_free_r>
 8004258:	0025      	movs	r5, r4
 800425a:	e7f7      	b.n	800424c <_realloc_r+0x14>
 800425c:	f000 f81b 	bl	8004296 <_malloc_usable_size_r>
 8004260:	9001      	str	r0, [sp, #4]
 8004262:	4284      	cmp	r4, r0
 8004264:	d803      	bhi.n	800426e <_realloc_r+0x36>
 8004266:	0035      	movs	r5, r6
 8004268:	0843      	lsrs	r3, r0, #1
 800426a:	42a3      	cmp	r3, r4
 800426c:	d3ee      	bcc.n	800424c <_realloc_r+0x14>
 800426e:	0021      	movs	r1, r4
 8004270:	0038      	movs	r0, r7
 8004272:	f7ff fbf3 	bl	8003a5c <_malloc_r>
 8004276:	1e05      	subs	r5, r0, #0
 8004278:	d0e8      	beq.n	800424c <_realloc_r+0x14>
 800427a:	9b01      	ldr	r3, [sp, #4]
 800427c:	0022      	movs	r2, r4
 800427e:	429c      	cmp	r4, r3
 8004280:	d900      	bls.n	8004284 <_realloc_r+0x4c>
 8004282:	001a      	movs	r2, r3
 8004284:	0031      	movs	r1, r6
 8004286:	0028      	movs	r0, r5
 8004288:	f7ff ff5f 	bl	800414a <memcpy>
 800428c:	0031      	movs	r1, r6
 800428e:	0038      	movs	r0, r7
 8004290:	f7ff ff88 	bl	80041a4 <_free_r>
 8004294:	e7da      	b.n	800424c <_realloc_r+0x14>

08004296 <_malloc_usable_size_r>:
 8004296:	1f0b      	subs	r3, r1, #4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1f18      	subs	r0, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	da01      	bge.n	80042a4 <_malloc_usable_size_r+0xe>
 80042a0:	580b      	ldr	r3, [r1, r0]
 80042a2:	18c0      	adds	r0, r0, r3
 80042a4:	4770      	bx	lr
	...

080042a8 <_init>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr

080042b4 <_fini>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr
